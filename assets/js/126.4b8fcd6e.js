(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{551:function(s,e,n){"use strict";n.r(e);var t=n(15),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("消息队列一般在消费端都会提供push和pull两种模式，RocketMQ同样实现了这两种模式，分别提供了两个实现类：DefaultMQPushConsumer和DefaultMQPullConsumer；两种方式各有优势："),n("br"),s._v(" "),n("strong",[s._v("push模式")]),s._v("：推送模式，即服务端有数据之后立马推送消息给客户端，需要客户端和服务器建立长连接，实时性很高，对客户端来说也简单，接收处理消息即可；缺点就是服务端不知道客户端处理消息的能力，可能会导致数据积压，同时也增加了服务端的工作量，影响服务端的性能；"),n("br"),s._v(" "),n("strong",[s._v("pull模式")]),s._v("：拉取模式，即客户端主动去服务端拉取数据，主动权在客户端，拉取数据，然后处理数据，再拉取数据，一直循环下去，具体拉取数据的时间间隔不好设定，太短可能会导致大量的连接拉取不到数据，太长导致数据接收不及时；"),n("br"),s._v("\nRocketMQ使用了长轮询的方式，兼顾了push和pull两种模式的优点，下面首先对长轮询做简单介绍，进而分析RocketMQ内置的长轮询模式。")]),s._v(" "),n("h2",{attrs:{id:"长轮询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#长轮询"}},[s._v("#")]),s._v(" 长轮询")]),s._v(" "),n("p",[s._v("长轮询通过客户端和服务端的配合，达到主动权在客户端，同时也能保证数据的实时性；长轮询本质上也是轮询，只不过对普通的轮询做了优化处理，服务端在没有数据的时候并不是马上返回数据，会hold住请求，等待服务端有数据，或者一直没有数据超时处理，然后一直循环下去；下面看一下如何简单实现一个长轮询；")]),s._v(" "),n("h3",{attrs:{id:"_1-实现步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现步骤"}},[s._v("#")]),s._v(" 1.实现步骤")]),s._v(" "),n("h4",{attrs:{id:"_1-1客户端轮询发送请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1客户端轮询发送请求"}},[s._v("#")]),s._v(" 1.1客户端轮询发送请求")]),s._v(" "),n("p",[s._v("客户端应该存在一个一直循环的程序，不停的向服务端发送获取消息请求；")]),s._v(" "),n("h4",{attrs:{id:"_1-2服务端处理数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2服务端处理数据"}},[s._v("#")]),s._v(" 1.2服务端处理数据")]),s._v(" "),n("p",[s._v("服务器接收到客户端请求之后，首先查看是否有数据，如果有数据则直接返回，如果没有则保持连接，等待获取数据，服务端获取数据之后，会通知之前的请求连接来获取数据，然后返回给客户端；")]),s._v(" "),n("h4",{attrs:{id:"_1-3客户端接收数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3客户端接收数据"}},[s._v("#")]),s._v(" 1.3客户端接收数据")]),s._v(" "),n("p",[s._v("正常情况下，客户端会马上接收到服务端的数据，或者等待一段时间获取到数据；如果一直获取不到数据，会有超时处理；在获取数据或者超时处理之后会关闭连接，然后再次发起长轮询请求；")]),s._v(" "),n("h3",{attrs:{id:"_2-实现实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现实例"}},[s._v("#")]),s._v(" 2.实现实例")]),s._v(" "),n("p",[s._v("以下使用netty模拟一个http服务器，使用HttpURLConnection模拟客户端发送请求，使用BlockingQueue存放数据；")]),s._v(" "),n("p",[s._v("服务端代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class Server {\n\n    public static void start(final int port) throws Exception {\n        EventLoopGroup boss = new NioEventLoopGroup();\n        EventLoopGroup woker = new NioEventLoopGroup();\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n\n        try {\n\n            serverBootstrap.channel(NioServerSocketChannel.class).group(boss, woker)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true).option(ChannelOption.SO_BACKLOG, 1024)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast("http-decoder", new HttpServerCodec());\n                            ch.pipeline().addLast(new HttpServerHandler());\n                        }\n                    });\n\n            ChannelFuture future = serverBootstrap.bind(port).sync();\n            System.out.println("server start ok port is " + port);\n            DataCenter.start();\n            future.channel().closeFuture().sync();\n        } finally {\n            boss.shutdownGracefully();\n            woker.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        start(8080);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("p",[s._v("netty默认支持http协议，直接使用即可，启动端口为8080；同时启动数据中心服务，相关代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class DataCenter {\n\n    private static Random random = new Random();\n    private static BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n    private static AtomicInteger num = new AtomicInteger();\n\n    public static void start() {\n        while (true) {\n            try {\n                Thread.sleep(random.nextInt(5) * 1000);\n                String data = "hello world" + num.incrementAndGet();\n                queue.put(data);\n                System.out.println("store data:" + data);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static String getData() throws InterruptedException {\n        return queue.take();\n    }\n\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("为了模拟服务端没有数据，需要等待的情况，这里使用BlockingQueue来模拟，不定期的往队列里面插入数据，同时对外提供获取数据的方法，使用的是take方法，没有数据会阻塞知道有数据为止；getData在类HttpServerHandler中使用，此类也很简单，如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class HttpServerHandler extends ChannelInboundHandlerAdapter {\n\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof HttpRequest) {\n            FullHttpResponse httpResponse = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n            httpResponse.content().writeBytes(DataCenter.getData().getBytes());\n            httpResponse.headers().set(HttpHeaders.Names.CONTENT_TYPE, "text/plain; charset=UTF-8");\n            httpResponse.headers().set(HttpHeaders.Names.CONTENT_LENGTH, httpResponse.content().readableBytes());\n            ctx.writeAndFlush(httpResponse);\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("获取到客户端的请求之后，从数据中心获取一条消息，如果没有数据，会进行等待，直到有数据为止；然后使用FullHttpResponse返回给客户端；客户端使用HttpURLConnection来和服务端建立连接，不停的拉取数据，代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class Client {\n\n    public static void main(String[] args) {\n        while (true) {\n            HttpURLConnection connection = null;\n            try {\n                URL url = new URL("http://localhost:8080");\n                connection = (HttpURLConnection) url.openConnection();\n                connection.setReadTimeout(10000);\n                connection.setConnectTimeout(3000);\n                connection.setRequestMethod("GET");\n                connection.connect();\n                if (200 == connection.getResponseCode()) {\n                    BufferedReader reader = null;\n                    try {\n                        reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));\n                        StringBuffer result = new StringBuffer();\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            result.append(line);\n                        }\n                        System.out.println("时间:" + new Date().toString() + "result =  " + result);\n                    } finally {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    connection.disconnect();\n                }\n            }\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("p",[s._v("以上只是简单的模拟了长轮询的方式，下面重点来看看RocketMQ是如何实现长轮询的；")]),s._v(" "),n("h2",{attrs:{id:"rocketmq长轮询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq长轮询"}},[s._v("#")]),s._v(" RocketMQ长轮询")]),s._v(" "),n("p",[s._v("RocketMQ的消费端提供了两种消费模式分别是：DefaultMQPushConsumer和DefaultMQPullConsumer，其中DefaultMQPushConsumer就是使用的长轮询，所以下面重点分析此类；")]),s._v(" "),n("h3",{attrs:{id:"_1-pullmessage服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-pullmessage服务"}},[s._v("#")]),s._v(" 1.PullMessage服务")]),s._v(" "),n("p",[s._v("从名字可以看出来就是客户端从服务端拉取数据的服务，看里面的一个核心方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Override\n    public void run() {\n        log.info(this.getServiceName() + " service started");\n\n        while (!this.isStopped()) {\n            try {\n                PullRequest pullRequest = this.pullRequestQueue.take();\n                this.pullMessage(pullRequest);\n            } catch (InterruptedException ignored) {\n            } catch (Exception e) {\n                log.error("Pull Message Service Run Method exception", e);\n            }\n        }\n\n        log.info(this.getServiceName() + " service end");\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("服务启动之后，会一直不停的循环调用拉取数据，PullRequest可以看作是拉取数据需要的参数，部分代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public class PullRequest {\n    private String consumerGroup;\n    private MessageQueue messageQueue;\n    private ProcessQueue processQueue;\n    private long nextOffset;\n    private boolean lockedFirst = false;\n    ...省略...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("每个MessageQueue 对应了封装成了一个PullRequest，因为拉取数据是以每个Broker下面的Queue为单位，同时里面还一个ProcessQueue，每个MessageQueue也同样对应一个ProcessQueue，保存了这个MessageQueue消息处理状态的快照；还有nextOffset用来标识读取的位置；继续看一段pullMessage中的内容，给服务端发送请求的头内容：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();\nrequestHeader.setConsumerGroup(this.consumerGroup);\nrequestHeader.setTopic(mq.getTopic());\nrequestHeader.setQueueId(mq.getQueueId());\nrequestHeader.setQueueOffset(offset);\nrequestHeader.setMaxMsgNums(maxNums);\nrequestHeader.setSysFlag(sysFlagInner);\nrequestHeader.setCommitOffset(commitOffset);\nrequestHeader.setSuspendTimeoutMillis(brokerSuspendMaxTimeMillis);\nrequestHeader.setSubscription(subExpression);\nrequestHeader.setSubVersion(subVersion);\nrequestHeader.setExpressionType(expressionType);\n\nString brokerAddr = findBrokerResult.getBrokerAddr();\nif (PullSysFlag.hasClassFilterFlag(sysFlagInner)) {\n      brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);\n}\n\nPullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(\n                brokerAddr,\n                requestHeader,\n                timeoutMillis,\n                communicationMode,\n                pullCallback);\n\n            return pullResult;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("其中有一个参数是SuspendTimeoutMillis，作用是设置Broker的最长阻塞时间，默认为15秒，前提是没有消息的情况下，有消息会立刻返回；")]),s._v(" "),n("h3",{attrs:{id:"_2-pullmessageprocessor服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-pullmessageprocessor服务"}},[s._v("#")]),s._v(" 2.PullMessageProcessor服务")]),s._v(" "),n("p",[s._v("从名字可以看出，服务端用来处理pullMessage的服务，下面重点看一下processRequest方法，其中包括对获取不同结果做的处理：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" switch (response.getCode()) {\n                case ResponseCode.SUCCESS:\n\n                    ...省略...\n                    break;\n                case ResponseCode.PULL_NOT_FOUND:\n\n                    if (brokerAllowSuspend && hasSuspendFlag) {\n                        long pollingTimeMills = suspendTimeoutMillisLong;\n                        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n                        }\n\n                        String topic = requestHeader.getTopic();\n                        long offset = requestHeader.getQueueOffset();\n                        int queueId = requestHeader.getQueueId();\n                        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n                            this.brokerController.getMessageStore().now(), offset, subscriptionData);\n                        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n                        response = null;\n                        break;\n                    }\n\n                case ResponseCode.PULL_RETRY_IMMEDIATELY:\n                    break;\n                case ResponseCode.PULL_OFFSET_MOVED:\n                    ...省略...\n\n                    break;\n                default:\n                    assert false;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("p",[s._v("一共处理了四个类型，我们关心的是在没有获取到数据的情况下是如何处理的，可以重点看一下ResponseCode.PULL_NOT_FOUND，表示没有拉取到数据，此时会调用PullRequestHoldService服务，从名字可以看出此服务用来hold住请求，不会立马返回，response被至为了null，不给客户端响应；下面重点看一下PullRequestHoldService：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Override\n    public void run() {\n        log.info("{} service started", this.getServiceName());\n        while (!this.isStopped()) {\n            try {\n                if (this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n                    this.waitForRunning(5 * 1000);\n                } else {\n                    this.waitForRunning(this.brokerController.getBrokerConfig().getShortPollingTimeMills());\n                }\n\n                long beginLockTimestamp = this.systemClock.now();\n                this.checkHoldRequest();\n                long costTime = this.systemClock.now() - beginLockTimestamp;\n                if (costTime > 5 * 1000) {\n                    log.info("[NOTIFYME] check hold request cost {} ms.", costTime);\n                }\n            } catch (Throwable e) {\n                log.warn(this.getServiceName() + " service has exception. ", e);\n            }\n        }\n\n        log.info("{} service end", this.getServiceName());\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("此方法主要就是通过不停的检查被hold住的请求，检查是否已经有数据了，具体检查哪些就是在ResponseCode.PULL_NOT_FOUND中调用的suspendPullRequest方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private ConcurrentHashMap<String/* topic@queueId */, ManyPullRequest> pullRequestTable =\n        new ConcurrentHashMap<String, ManyPullRequest>(1024);\n        \n public void suspendPullRequest(final String topic, final int queueId, final PullRequest pullRequest) {\n        String key = this.buildKey(topic, queueId);\n        ManyPullRequest mpr = this.pullRequestTable.get(key);\n        if (null == mpr) {\n            mpr = new ManyPullRequest();\n            ManyPullRequest prev = this.pullRequestTable.putIfAbsent(key, mpr);\n            if (prev != null) {\n                mpr = prev;\n            }\n        }\n\n        mpr.addPullRequest(pullRequest);\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("将需要hold处理的PullRequest放入到一个ConcurrentHashMap中，等待被检查；具体的检查代码在checkHoldRequest中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private void checkHoldRequest() {\n        for (String key : this.pullRequestTable.keySet()) {\n            String[] kArray = key.split(TOPIC_QUEUEID_SEPARATOR);\n            if (2 == kArray.length) {\n                String topic = kArray[0];\n                int queueId = Integer.parseInt(kArray[1]);\n                final long offset = this.brokerController.getMessageStore().getMaxOffsetInQuque(topic, queueId);\n                try {\n                    this.notifyMessageArriving(topic, queueId, offset);\n                } catch (Throwable e) {\n                    log.error("check hold request failed. topic={}, queueId={}", topic, queueId, e);\n                }\n            }\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("此方法用来获取指定messageQueue下最大的offset，然后用来和当前的offset来比较，来确定是否有新的消息到来；往下看notifyMessageArriving方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public void notifyMessageArriving(final String topic, final int queueId, final long maxOffset, final Long tagsCode) {\n        String key = this.buildKey(topic, queueId);\n        ManyPullRequest mpr = this.pullRequestTable.get(key);\n        if (mpr != null) {\n            List<PullRequest> requestList = mpr.cloneListAndClear();\n            if (requestList != null) {\n                List<PullRequest> replayList = new ArrayList<PullRequest>();\n\n                for (PullRequest request : requestList) {\n                    long newestOffset = maxOffset;\n                    if (newestOffset <= request.getPullFromThisOffset()) {\n                        newestOffset = this.brokerController.getMessageStore().getMaxOffsetInQuque(topic, queueId);\n                    }\n\n                    if (newestOffset > request.getPullFromThisOffset()) {\n                        if (this.messageFilter.isMessageMatched(request.getSubscriptionData(), tagsCode)) {\n                            try {\n                                this.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),\n                                    request.getRequestCommand());\n                            } catch (Throwable e) {\n                                log.error("execute request when wakeup failed.", e);\n                            }\n                            continue;\n                        }\n                    }\n\n                    if (System.currentTimeMillis() >= (request.getSuspendTimestamp() + request.getTimeoutMillis())) {\n                        try {\n                            this.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),\n                                request.getRequestCommand());\n                        } catch (Throwable e) {\n                            log.error("execute request when wakeup failed.", e);\n                        }\n                        continue;\n                    }\n\n                    replayList.add(request);\n                }\n\n                if (!replayList.isEmpty()) {\n                    mpr.addPullRequest(replayList);\n                }\n            }\n        }\n    }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("p",[s._v("方法中两个重要的判定就是：比较当前的offset和maxoffset，看是否有新的消息到来，有新的消息返回客户端；另外一个就是比较当前的时间和阻塞的时间，看是否超过了最大的阻塞时间，超过也同样返回；"),n("br"),s._v("\n此方法不光在PullRequestHoldService服务类中循环调用检查，同时在DefaultMessageStore中消息被存储的时候调用；其实就是主动检查和被动通知两种方式。")]),s._v(" "),n("h3",{attrs:{id:"_3-pullcallback回调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-pullcallback回调"}},[s._v("#")]),s._v(" 3.PullCallback回调")]),s._v(" "),n("p",[s._v("服务端处理完之后，给客户端响应，回调其中的PullCallback，其中在处理完消息之后，重要的一步就是再次把pullRequest放到PullMessageService服务中，等待下一次的轮询；")]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("本文首先介绍了两种消费消息的模式，介绍了其中的优缺点，然后引出了长轮询，并且在本地简单模拟了长轮询，最后重点介绍了RocketMQ中是如何实现的长轮询。")])])}),[],!1,null,null,null);e.default=a.exports}}]);