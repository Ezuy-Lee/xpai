(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{549:function(e,s,n){"use strict";n.r(s);var a=n(15),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("生产者向消息队列里面写入消息，不同的业务场景会采用不同的写入策略，比如：同步发送，异步发送，延迟发送，事务消息等；本文首先从分析生产者发送消息的流程开始，然后再来介绍各种发送消息的策略。")]),e._v(" "),n("h2",{attrs:{id:"生产者流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生产者流程"}},[e._v("#")]),e._v(" 生产者流程")]),e._v(" "),n("h3",{attrs:{id:"_1-流程概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-流程概述"}},[e._v("#")]),e._v(" 1.流程概述")]),e._v(" "),n("p",[e._v("生产者首先需要设置namesrv，或者指定其他方式更新namesrv；然后从namesrv获取topic的路由信息，路由信息包括broker以及Message Queue等信息，同时将路由信息保存在本地内存中，方便下次使用；最后从Message Queue列表中选择合适的Queue发送消息，实现负载均衡；")]),e._v(" "),n("h3",{attrs:{id:"_2-启动过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动过程"}},[e._v("#")]),e._v(" 2.启动过程")]),e._v(" "),n("p",[e._v("DefaultMQProducer实例化提供了两个参数分别是：生产者组名称以及RPCHook，RPCHook是一个接口，具体实现交由业务端实现，两个方法分别是：doBeforeRequest和doAfterResponse，表示在执行请求之前和接收返回之后分别执行相关逻辑；"),n("br"),e._v("\n接下来就是调用DefaultMQProducer的start方法，相关的初始化操作都在里面进行，内部其实调用的是DefaultMQProducerImpl的start方法，具体代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public void start(final boolean startFactory) throws MQClientException {\n        switch (this.serviceState) {\n            case CREATE_JUST:\n                this.serviceState = ServiceState.START_FAILED;\n\n                this.checkConfig();\n\n                if (!this.defaultMQProducer.getProducerGroup().equals(MixAll.CLIENT_INNER_PRODUCER_GROUP)) {\n                    this.defaultMQProducer.changeInstanceNameToPID();\n                }\n\n                this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQProducer, rpcHook);\n\n                boolean registerOK = mQClientFactory.registerProducer(this.defaultMQProducer.getProducerGroup(), this);\n                if (!registerOK) {\n                    this.serviceState = ServiceState.CREATE_JUST;\n                    throw new MQClientException("The producer group[" + this.defaultMQProducer.getProducerGroup()\n                        + "] has been created before, specify another name please." + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),\n                        null);\n                }\n\n                this.topicPublishInfoTable.put(this.defaultMQProducer.getCreateTopicKey(), new TopicPublishInfo());\n\n                if (startFactory) {\n                    mQClientFactory.start();\n                }\n\n                log.info("the producer [{}] start OK. sendMessageWithVIPChannel={}", this.defaultMQProducer.getProducerGroup(),\n                    this.defaultMQProducer.isSendMessageWithVIPChannel());\n                this.serviceState = ServiceState.RUNNING;\n                break;\n            case RUNNING:\n            case START_FAILED:\n            case SHUTDOWN_ALREADY:\n                throw new MQClientException("The producer service state not OK, maybe started once, "\n                    + this.serviceState\n                    + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK),\n                    null);\n            default:\n                break;\n        }\n\n        this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();\n    }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br")])]),n("p",[e._v("默认serviceState的状态为CREATE_JUST，刚进入设置为START_FAILED，初始化完成之后设置为RUNNING，再次初始化时会直接报错，下面看一下具体初始化了哪些信息；")]),e._v(" "),n("h4",{attrs:{id:"_2-1检查配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1检查配置"}},[e._v("#")]),e._v(" 2.1检查配置")]),e._v(" "),n("p",[e._v("这里的检查其实就是对producerGroup进行合法性校验；")]),e._v(" "),n("h4",{attrs:{id:"_2-2设置instancename"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2设置instancename"}},[e._v("#")]),e._v(" 2.2设置instanceName")]),e._v(" "),n("p",[e._v('如果producerGroup不等于默认的"CLIENT_INNER_PRODUCER",则设置DefaultMQProducer的instanceName为进程的pid；')]),e._v(" "),n("h4",{attrs:{id:"_2-3创建mqclientinstance对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3创建mqclientinstance对象"}},[e._v("#")]),e._v(" 2.3创建MQClientInstance对象")]),e._v(" "),n("p",[e._v("首先检查 ConcurrentMap<String/_ clientId _/, MQClientInstance> factoryTable中是否已经存在已clientId为key的MQClientInstance，如果存在则取出，不存在则实例化；clientId是已ip地址，instanceName以及unitName组成的，例如：10.13.83.7"),n("a",{attrs:{href:"https://my.oschina.net/12500",target:"_blank",rel:"noopener noreferrer"}},[e._v("@12500"),n("OutboundLink")],1)]),e._v(" "),n("h4",{attrs:{id:"_2-4注册producer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4注册producer"}},[e._v("#")]),e._v(" 2.4注册producer")]),e._v(" "),n("p",[e._v("将DefaultMQProducerImpl注册到MQClientInstance中，已producerGroup作为key，注册到ConcurrentMap<String/_group _/, MQProducerInner> producerTable中，如果已经存在此Group，则抛出异常；")]),e._v(" "),n("h4",{attrs:{id:"_2-5初始化topicpublishinfo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5初始化topicpublishinfo"}},[e._v("#")]),e._v(" 2.5初始化TopicPublishInfo")]),e._v(" "),n("p",[e._v('已topic名称为"TBW102"为key，实例化TopicPublishInfo作为value，存放在ConcurrentMap<String/_ topic _/, TopicPublishInfo> topicPublishInfoTable中,TopicPublishInfo用来存放topic的路由信息；')]),e._v(" "),n("h4",{attrs:{id:"_2-6启动mqclientinstance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6启动mqclientinstance"}},[e._v("#")]),e._v(" 2.6启动MQClientInstance")]),e._v(" "),n("p",[e._v("MQClientInstance启动会启动很多相关服务，具体可以看如下代码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' public void start() throws MQClientException {\n\n        synchronized (this) {\n            switch (this.serviceState) {\n                case CREATE_JUST:\n                    this.serviceState = ServiceState.START_FAILED;\n                    // If not specified,looking address from name server\n                    if (null == this.clientConfig.getNamesrvAddr()) {\n                        this.mQClientAPIImpl.fetchNameServerAddr();\n                    }\n                    // Start request-response channel\n                    this.mQClientAPIImpl.start();\n                    // Start various schedule tasks\n                    this.startScheduledTask();\n                    // Start pull service\n                    this.pullMessageService.start();\n                    // Start rebalance service\n                    this.rebalanceService.start();\n                    // Start push service\n                    this.defaultMQProducer.getDefaultMQProducerImpl().start(false);\n                    log.info("the client factory [{}] start OK", this.clientId);\n                    this.serviceState = ServiceState.RUNNING;\n                    break;\n                case RUNNING:\n                    break;\n                case SHUTDOWN_ALREADY:\n                    break;\n                case START_FAILED:\n                    throw new MQClientException("The Factory object[" + this.getClientId() + "] has been created before, and failed.", null);\n                default:\n                    break;\n            }\n        }\n    }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br")])]),n("p",[e._v("默认serviceState的状态为CREATE_JUST，刚进入设置为START_FAILED，初始化完成之后设置为RUNNING，防止重复初始化；")]),e._v(" "),n("p",[e._v("2.6.1初始化NameServerAddr")]),e._v(" "),n("p",[e._v("首先判断DefaultMQProducer是否配置了NameServerAddr，如果没有配置会到一个地址下获取，地址默认为："),n("a",{attrs:{href:"http://jmenv.tbsite.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://jmenv.tbsite.net"),n("OutboundLink")],1),e._v(":8080/rocketmq/nsaddr，相关的逻辑在MixAll类中，代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    public static String getWSAddr() {\n        String wsDomainName = System.getProperty("rocketmq.namesrv.domain", DEFAULT_NAMESRV_ADDR_LOOKUP);\n        String wsDomainSubgroup = System.getProperty("rocketmq.namesrv.domain.subgroup", "nsaddr");\n        String wsAddr = "http://" + wsDomainName + ":8080/rocketmq/" + wsDomainSubgroup;\n        if (wsDomainName.indexOf(":") > 0) {\n            wsAddr = "http://" + wsDomainName + "/rocketmq/" + wsDomainSubgroup;\n        }\n        return wsAddr;\n    }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("正常情况下我们需要设置自己的地址，可以通过如下方式设置：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('System.setProperty("rocketmq.namesrv.domain", "localhost");\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("这种情况下就可以不用手动设置NameServerAddr；")]),e._v(" "),n("p",[e._v("2.6.2初始化RemotingClient")]),e._v(" "),n("p",[e._v("RemotingClient是一个接口类，底层使用的通讯框架是Netty，提供了实现类NettyRemotingClient，RemotingClient在初始化的时候实例化Bootstrap，方便后续用来创建Channel；")]),e._v(" "),n("p",[e._v("2.6.3启动定时器任务")]),e._v(" "),n("p",[e._v("总共启动了5个定时器任务，分别是：定时更新NameServerAddr信息，定时更新topic的路由信息，定时清理下线的broker，定时持久化Consumer的Offset信息，定时调整线程池；")]),e._v(" "),n("p",[e._v("2.6.3启动服务")]),e._v(" "),n("p",[e._v("pullMessageService和rebalanceService被用在消费端的两个服务类，分别是：从broker拉取消息的服务和均衡消息队列服务，负责分配消费者可消费的消息队列；")]),e._v(" "),n("h3",{attrs:{id:"_3-发送消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-发送消息"}},[e._v("#")]),e._v(" 3.发送消息")]),e._v(" "),n("p",[e._v("相关发送消息的代码在DefaultMQProducerImpl的sendDefaultImpl方法中，部分代码如下所示：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private SendResult sendDefaultImpl(\n        Message msg,\n        final CommunicationMode communicationMode,\n        final SendCallback sendCallback,\n        final long timeout\n    ) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {\n        this.makeSureStateOK();\n        Validators.checkMessage(msg, this.defaultMQProducer);\n\n        final long invokeID = random.nextLong();\n        long beginTimestampFirst = System.currentTimeMillis();\n        long beginTimestampPrev = beginTimestampFirst;\n        long endTimestamp = beginTimestampFirst;\n        TopicPublishInfo topicPublishInfo = this.tryToFindTopicPublishInfo(msg.getTopic());\n        if (topicPublishInfo != null && topicPublishInfo.ok()) {\n            boolean callTimeout = false;\n            MessageQueue mq = null;\n            Exception exception = null;\n            SendResult sendResult = null;\n            int timesTotal = communicationMode == CommunicationMode.SYNC ? 1 + this.defaultMQProducer.getRetryTimesWhenSendFailed() : 1;\n            int times = 0;\n            String[] brokersSent = new String[timesTotal];\n            for (; times < timesTotal; times++) {\n                String lastBrokerName = null == mq ? null : mq.getBrokerName();\n                MessageQueue mqSelected = this.selectOneMessageQueue(topicPublishInfo, lastBrokerName);\n                if (mqSelected != null) {\n                    mq = mqSelected;\n                    brokersSent[times] = mq.getBrokerName();\n                    try {\n                        beginTimestampPrev = System.currentTimeMillis();\n                        long costTime = beginTimestampPrev - beginTimestampFirst;\n                        if (timeout < costTime) {\n                            callTimeout = true;\n                            break;\n                        }\n\n                        sendResult = this.sendKernelImpl(msg, mq, communicationMode, sendCallback, topicPublishInfo, timeout - costTime);\n                        endTimestamp = System.currentTimeMillis();\n                        this.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, false);\n                        switch (communicationMode) {\n                            case ASYNC:\n                                return null;\n                            case ONEWAY:\n                                return null;\n                            case SYNC:\n                                if (sendResult.getSendStatus() != SendStatus.SEND_OK) {\n                                    if (this.defaultMQProducer.isRetryAnotherBrokerWhenNotStoreOK()) {\n                                        continue;\n                                    }\n                                }\n\n                                return sendResult;\n                            default:\n                                break;\n                        }\n                        ...以下代码省略...\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br")])]),n("p",[e._v("此方法的四个参数分别是：msg为要发送的消息，communicationMode要使用的发送方式包括同步、异步、单向，sendCallback在异步情况下的回调函数，timeout发送消息的超时时间；")]),e._v(" "),n("h4",{attrs:{id:"_3-1获取topic的路由信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1获取topic的路由信息"}},[e._v("#")]),e._v(" 3.1获取topic的路由信息")]),e._v(" "),n("p",[e._v("通过msg中设置的topic获取路由信息，具体代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private TopicPublishInfo tryToFindTopicPublishInfo(final String topic) {\n        TopicPublishInfo topicPublishInfo = this.topicPublishInfoTable.get(topic);\n        if (null == topicPublishInfo || !topicPublishInfo.ok()) {\n            this.topicPublishInfoTable.putIfAbsent(topic, new TopicPublishInfo());\n            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic);\n            topicPublishInfo = this.topicPublishInfoTable.get(topic);\n        }\n\n        if (topicPublishInfo.isHaveTopicRouterInfo() || topicPublishInfo.ok()) {\n            return topicPublishInfo;\n        } else {\n            this.mQClientFactory.updateTopicRouteInfoFromNameServer(topic, true, this.defaultMQProducer);\n            topicPublishInfo = this.topicPublishInfoTable.get(topic);\n            return topicPublishInfo;\n        }\n    }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v('首先从变量ConcurrentMap<String/_ topic _/, TopicPublishInfo> topicPublishInfoTable中获取是否存在指定topic的路由信息，如果获取不到则使用topic去nameServer获取路由信息，如果还是获取不到则使用默认的topic名称为"TBW102"去获取路由信息，需要使用默认名称去获取的情况是没有创建topic，需要broker自动创建topic的情况；获取路由信息使用的是MQClientInstance中的updateTopicRouteInfoFromNameServer方法，此方法根据topic获取路由信息，具体连接哪台nameServer，会从列表中顺序的选择nameServer，实现负载均衡；'),n("br"),e._v('\n注：名称为"TBW102"的topic是系统自动创建的；')]),e._v(" "),n("h4",{attrs:{id:"_3-2选择messagequeue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2选择messagequeue"}},[e._v("#")]),e._v(" 3.2选择MessageQueue")]),e._v(" "),n("p",[e._v("成功获取到路由信息之后，需要从MessageQueue列表中选择一个，在这之前获取了默认发送消息失败的重试次数，默认为3次(只有发送模式是同步的情况下)，代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public MessageQueue selectOneMessageQueue(final TopicPublishInfo tpInfo, final String lastBrokerName) {\n        if (this.sendLatencyFaultEnable) {\n            try {\n                int index = tpInfo.getSendWhichQueue().getAndIncrement();\n                for (int i = 0; i < tpInfo.getMessageQueueList().size(); i++) {\n                    int pos = Math.abs(index++) % tpInfo.getMessageQueueList().size();\n                    if (pos < 0)\n                        pos = 0;\n                    MessageQueue mq = tpInfo.getMessageQueueList().get(pos);\n                    if (latencyFaultTolerance.isAvailable(mq.getBrokerName())) {\n                        if (null == lastBrokerName || mq.getBrokerName().equals(lastBrokerName))\n                            return mq;\n                    }\n                }\n\n                final String notBestBroker = latencyFaultTolerance.pickOneAtLeast();\n                int writeQueueNums = tpInfo.getQueueIdByBroker(notBestBroker);\n                if (writeQueueNums > 0) {\n                    final MessageQueue mq = tpInfo.selectOneMessageQueue();\n                    if (notBestBroker != null) {\n                        mq.setBrokerName(notBestBroker);\n                        mq.setQueueId(tpInfo.getSendWhichQueue().getAndIncrement() % writeQueueNums);\n                    }\n                    return mq;\n                } else {\n                    latencyFaultTolerance.remove(notBestBroker);\n                }\n            } catch (Exception e) {\n                log.error("Error occurred when selecting message queue", e);\n            }\n\n            return tpInfo.selectOneMessageQueue();\n        }\n\n        return tpInfo.selectOneMessageQueue(lastBrokerName);\n    }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br")])]),n("p",[e._v("以上代码在MQFaultStrategy，此类提供了选择MessageQueue的策略，相关策略可以看类变量：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private final LatencyFaultTolerance<String> latencyFaultTolerance = new LatencyFaultToleranceImpl();\n\n    private boolean sendLatencyFaultEnable = false;\n\n    private long[] latencyMax = {50L, 100L, 550L, 1000L, 2000L, 3000L, 15000L};\n    private long[] notAvailableDuration = {0L, 0L, 30000L, 60000L, 120000L, 180000L, 600000L};\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("latencyFaultTolerance：延迟容错对象，维护brokers的延迟信息；"),n("br"),e._v("\nsendLatencyFaultEnable：延迟容错开关，默认不开启；"),n("br"),e._v("\nlatencyMax：延迟级别数组；"),n("br"),e._v("\nnotAvailableDuration ：根据延迟级别，对应broker不可用的时长；")]),e._v(" "),n("p",[e._v("这样上面的这段代码就好理解了，首先判定是否开启开关，如果开启首先获取index，index初始为一个随机值，后面每次+1，这样在后面与MessageQueue长度取模的时候每个MessageQueue可以按顺序获取；获取MessageQueue之后需要判定其对应的Broker是否可用，同时也需要和当前指定的brokerName进行匹配；如果没有获取到就选择一个延迟相对小的，pickOneAtLeast会做排序处理；如果都不行就直接获取一个MessageQueue，不管其他条件了；")]),e._v(" "),n("h4",{attrs:{id:"_3-3发送消息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3发送消息"}},[e._v("#")]),e._v(" 3.3发送消息")]),e._v(" "),n("p",[e._v("在发送之前会做超时检测，如果前面两步已经超时了，则直接报超时，默认超时时间是3秒；部分代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    private SendResult sendKernelImpl(final Message msg,\n                                      final MessageQueue mq,\n                                      final CommunicationMode communicationMode,\n                                      final SendCallback sendCallback,\n                                      final TopicPublishInfo topicPublishInfo,\n                                      final long timeout) throws MQClientException, RemotingException, MQBrokerException, InterruptedException {\n        long beginStartTime = System.currentTimeMillis();\n        String brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());\n        if (null == brokerAddr) {\n            tryToFindTopicPublishInfo(mq.getTopic());\n            brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(mq.getBrokerName());\n        }\n\n        SendMessageContext context = null;\n        if (brokerAddr != null) {\n            brokerAddr = MixAll.brokerVIPChannel(this.defaultMQProducer.isSendMessageWithVIPChannel(), brokerAddr);\n\n            byte[] prevBody = msg.getBody();\n            try {\n                //for MessageBatch,ID has been set in the generating process\n                if (!(msg instanceof MessageBatch)) {\n                    MessageClientIDSetter.setUniqID(msg);\n                }\n\n                int sysFlag = 0;\n                boolean msgBodyCompressed = false;\n                if (this.tryToCompressMessage(msg)) {\n                    sysFlag |= MessageSysFlag.COMPRESSED_FLAG;\n                    msgBodyCompressed = true;\n                }\n\n                final String tranMsg = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);\n                if (tranMsg != null && Boolean.parseBoolean(tranMsg)) {\n                    sysFlag |= MessageSysFlag.TRANSACTION_PREPARED_TYPE;\n                }\n\n                if (hasCheckForbiddenHook()) {\n                    CheckForbiddenContext checkForbiddenContext = new CheckForbiddenContext();\n                    checkForbiddenContext.setNameSrvAddr(this.defaultMQProducer.getNamesrvAddr());\n                    checkForbiddenContext.setGroup(this.defaultMQProducer.getProducerGroup());\n                    checkForbiddenContext.setCommunicationMode(communicationMode);\n                    checkForbiddenContext.setBrokerAddr(brokerAddr);\n                    checkForbiddenContext.setMessage(msg);\n                    checkForbiddenContext.setMq(mq);\n                    checkForbiddenContext.setUnitMode(this.isUnitMode());\n                    this.executeCheckForbiddenHook(checkForbiddenContext);\n                }\n\n                if (this.hasSendMessageHook()) {\n                    context = new SendMessageContext();\n                    context.setProducer(this);\n                    context.setProducerGroup(this.defaultMQProducer.getProducerGroup());\n                    context.setCommunicationMode(communicationMode);\n                    context.setBornHost(this.defaultMQProducer.getClientIP());\n                    context.setBrokerAddr(brokerAddr);\n                    context.setMessage(msg);\n                    context.setMq(mq);\n                    String isTrans = msg.getProperty(MessageConst.PROPERTY_TRANSACTION_PREPARED);\n                    if (isTrans != null && isTrans.equals("true")) {\n                        context.setMsgType(MessageType.Trans_Msg_Half);\n                    }\n\n                    if (msg.getProperty("__STARTDELIVERTIME") != null || msg.getProperty(MessageConst.PROPERTY_DELAY_TIME_LEVEL) != null) {\n                        context.setMsgType(MessageType.Delay_Msg);\n                    }\n                    this.executeSendMessageHookBefore(context);\n                }\n\n                SendMessageRequestHeader requestHeader = new SendMessageRequestHeader();\n                requestHeader.setProducerGroup(this.defaultMQProducer.getProducerGroup());\n                requestHeader.setTopic(msg.getTopic());\n                requestHeader.setDefaultTopic(this.defaultMQProducer.getCreateTopicKey());\n                requestHeader.setDefaultTopicQueueNums(this.defaultMQProducer.getDefaultTopicQueueNums());\n                requestHeader.setQueueId(mq.getQueueId());\n                requestHeader.setSysFlag(sysFlag);\n                requestHeader.setBornTimestamp(System.currentTimeMillis());\n                requestHeader.setFlag(msg.getFlag());\n                requestHeader.setProperties(MessageDecoder.messageProperties2String(msg.getProperties()));\n                requestHeader.setReconsumeTimes(0);\n                requestHeader.setUnitMode(this.isUnitMode());\n                requestHeader.setBatch(msg instanceof MessageBatch);\n                if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) {\n                    String reconsumeTimes = MessageAccessor.getReconsumeTime(msg);\n                    if (reconsumeTimes != null) {\n                        requestHeader.setReconsumeTimes(Integer.valueOf(reconsumeTimes));\n                        MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_RECONSUME_TIME);\n                    }\n\n                    String maxReconsumeTimes = MessageAccessor.getMaxReconsumeTimes(msg);\n                    if (maxReconsumeTimes != null) {\n                        requestHeader.setMaxReconsumeTimes(Integer.valueOf(maxReconsumeTimes));\n                        MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_MAX_RECONSUME_TIMES);\n                    }\n                }\n\n                SendResult sendResult = null;\n                switch (communicationMode) {\n                    case ASYNC:\n                        Message tmpMessage = msg;\n                        if (msgBodyCompressed) {\n                            //If msg body was compressed, msgbody should be reset using prevBody.\n                            //Clone new message using commpressed message body and recover origin massage.\n                            //Fix bug:https://github.com/apache/rocketmq-externals/issues/66\n                            tmpMessage = MessageAccessor.cloneMessage(msg);\n                            msg.setBody(prevBody);\n                        }\n                        long costTimeAsync = System.currentTimeMillis() - beginStartTime;\n                        if (timeout < costTimeAsync) {\n                            throw new RemotingTooMuchRequestException("sendKernelImpl call timeout");\n                        }\n                        sendResult = this.mQClientFactory.getMQClientAPIImpl().sendMessage(\n                            brokerAddr,\n                            mq.getBrokerName(),\n                            tmpMessage,\n                            requestHeader,\n                            timeout - costTimeAsync,\n                            communicationMode,\n                            sendCallback,\n                            topicPublishInfo,\n                            this.mQClientFactory,\n                            this.defaultMQProducer.getRetryTimesWhenSendAsyncFailed(),\n                            context,\n                            this);\n                        break;\n                    case ONEWAY:\n                    case SYNC:\n                        long costTimeSync = System.currentTimeMillis() - beginStartTime;\n                        if (timeout < costTimeSync) {\n                            throw new RemotingTooMuchRequestException("sendKernelImpl call timeout");\n                        }\n                        sendResult = this.mQClientFactory.getMQClientAPIImpl().sendMessage(\n                            brokerAddr,\n                            mq.getBrokerName(),\n                            msg,\n                            requestHeader,\n                            timeout - costTimeSync,\n                            communicationMode,\n                            context,\n                            this);\n                        break;\n                    default:\n                        assert false;\n                        break;\n                }\n\n                if (this.hasSendMessageHook()) {\n                    context.setSendResult(sendResult);\n                    this.executeSendMessageHookAfter(context);\n                }\n\n                return sendResult;\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br"),n("span",{staticClass:"line-number"},[e._v("87")]),n("br"),n("span",{staticClass:"line-number"},[e._v("88")]),n("br"),n("span",{staticClass:"line-number"},[e._v("89")]),n("br"),n("span",{staticClass:"line-number"},[e._v("90")]),n("br"),n("span",{staticClass:"line-number"},[e._v("91")]),n("br"),n("span",{staticClass:"line-number"},[e._v("92")]),n("br"),n("span",{staticClass:"line-number"},[e._v("93")]),n("br"),n("span",{staticClass:"line-number"},[e._v("94")]),n("br"),n("span",{staticClass:"line-number"},[e._v("95")]),n("br"),n("span",{staticClass:"line-number"},[e._v("96")]),n("br"),n("span",{staticClass:"line-number"},[e._v("97")]),n("br"),n("span",{staticClass:"line-number"},[e._v("98")]),n("br"),n("span",{staticClass:"line-number"},[e._v("99")]),n("br"),n("span",{staticClass:"line-number"},[e._v("100")]),n("br"),n("span",{staticClass:"line-number"},[e._v("101")]),n("br"),n("span",{staticClass:"line-number"},[e._v("102")]),n("br"),n("span",{staticClass:"line-number"},[e._v("103")]),n("br"),n("span",{staticClass:"line-number"},[e._v("104")]),n("br"),n("span",{staticClass:"line-number"},[e._v("105")]),n("br"),n("span",{staticClass:"line-number"},[e._v("106")]),n("br"),n("span",{staticClass:"line-number"},[e._v("107")]),n("br"),n("span",{staticClass:"line-number"},[e._v("108")]),n("br"),n("span",{staticClass:"line-number"},[e._v("109")]),n("br"),n("span",{staticClass:"line-number"},[e._v("110")]),n("br"),n("span",{staticClass:"line-number"},[e._v("111")]),n("br"),n("span",{staticClass:"line-number"},[e._v("112")]),n("br"),n("span",{staticClass:"line-number"},[e._v("113")]),n("br"),n("span",{staticClass:"line-number"},[e._v("114")]),n("br"),n("span",{staticClass:"line-number"},[e._v("115")]),n("br"),n("span",{staticClass:"line-number"},[e._v("116")]),n("br"),n("span",{staticClass:"line-number"},[e._v("117")]),n("br"),n("span",{staticClass:"line-number"},[e._v("118")]),n("br"),n("span",{staticClass:"line-number"},[e._v("119")]),n("br"),n("span",{staticClass:"line-number"},[e._v("120")]),n("br"),n("span",{staticClass:"line-number"},[e._v("121")]),n("br"),n("span",{staticClass:"line-number"},[e._v("122")]),n("br"),n("span",{staticClass:"line-number"},[e._v("123")]),n("br"),n("span",{staticClass:"line-number"},[e._v("124")]),n("br"),n("span",{staticClass:"line-number"},[e._v("125")]),n("br"),n("span",{staticClass:"line-number"},[e._v("126")]),n("br"),n("span",{staticClass:"line-number"},[e._v("127")]),n("br"),n("span",{staticClass:"line-number"},[e._v("128")]),n("br"),n("span",{staticClass:"line-number"},[e._v("129")]),n("br"),n("span",{staticClass:"line-number"},[e._v("130")]),n("br"),n("span",{staticClass:"line-number"},[e._v("131")]),n("br"),n("span",{staticClass:"line-number"},[e._v("132")]),n("br"),n("span",{staticClass:"line-number"},[e._v("133")]),n("br"),n("span",{staticClass:"line-number"},[e._v("134")]),n("br"),n("span",{staticClass:"line-number"},[e._v("135")]),n("br"),n("span",{staticClass:"line-number"},[e._v("136")]),n("br"),n("span",{staticClass:"line-number"},[e._v("137")]),n("br"),n("span",{staticClass:"line-number"},[e._v("138")]),n("br"),n("span",{staticClass:"line-number"},[e._v("139")]),n("br"),n("span",{staticClass:"line-number"},[e._v("140")]),n("br"),n("span",{staticClass:"line-number"},[e._v("141")]),n("br"),n("span",{staticClass:"line-number"},[e._v("142")]),n("br"),n("span",{staticClass:"line-number"},[e._v("143")]),n("br"),n("span",{staticClass:"line-number"},[e._v("144")]),n("br"),n("span",{staticClass:"line-number"},[e._v("145")]),n("br"),n("span",{staticClass:"line-number"},[e._v("146")]),n("br"),n("span",{staticClass:"line-number"},[e._v("147")]),n("br"),n("span",{staticClass:"line-number"},[e._v("148")]),n("br"),n("span",{staticClass:"line-number"},[e._v("149")]),n("br"),n("span",{staticClass:"line-number"},[e._v("150")]),n("br"),n("span",{staticClass:"line-number"},[e._v("151")]),n("br")])]),n("p",[e._v("此处的6个参数分别是：msg消息本身，mq要发送到的队列，communicationMode发送策略，sendCallback异步回调函数，topicPublishInfo路由信息，timeout发送超时时间(3秒-前2步消耗的时间)；首先需要获取指定broker的地址，这要才能创建channel与broker连接；然后就是一些hock处理；接下来就是准备发送的消息头SendMessageRequestHeader，最后根据不同的发送策略执行发送消息，此处就不在进入更加深入的分析；")]),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("本文重点介绍了发送者的启动，以及发送消息的大概流程；关于消息的发送策略，以及消息的类型包括：顺序消息，事务消息等，将在后面的文章介绍。")])])}),[],!1,null,null,null);s.default=t.exports}}]);