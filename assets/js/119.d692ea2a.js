(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{545:function(s,n,e){"use strict";e.r(n);var a=e(15),i=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" "),e("strong",[s._v("前言")])]),s._v(" "),e("p",[s._v("在上文Nginx+Tomcat关于Session的管理中简单介绍了如何使用redis来集中管理session，本文首先将介绍默认的管理器是如何管理Session的生命周期的，然后在此基础上对Redis集中式管理Session进行分析。")]),s._v(" "),e("h2",{attrs:{id:"tomcat-manager介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-manager介绍"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Tomcat Manager介绍")])]),s._v(" "),e("p",[s._v("上文中在Tomcat的context.xml中配置了Session管理器RedisSessionManager，实现了通过redis来存储session的功能；Tomcat本身提供了多种Session管理器，如下类图："),e("br"),s._v(" "),e("img",{attrs:{src:"https://static.oschina.net/uploads/img/201806/06123754_iOOV.jpg",alt:"图片描述"}})]),s._v(" "),e("p",[s._v("1.Manager接口类"),e("br"),s._v("\n定义了用来管理session的基本接口，包括：createSession，findSession，add，remove等对session操作的方法；还有getMaxActive，setMaxActive，getActiveSessions活跃会话的管理；还有Session有效期的接口；以及与Container相关联的接口；")]),s._v(" "),e("p",[s._v("2.ManagerBase抽象类"),e("br"),s._v("\n实现了Manager接口，提供了基本的功能，使用ConcurrentHashMap存放session，提供了对session的create，find，add，remove功能，并且在createSession中了使用类SessionIdGenerator来生成会话id，作为session的唯一标识；")]),s._v(" "),e("p",[s._v("3.ClusterManager接口类"),e("br"),s._v("\n实现了Manager接口，集群session的管理器，Tomcat内置的集群服务器之间的session复制功能；")]),s._v(" "),e("p",[s._v("4.ClusterManagerBase抽象类"),e("br"),s._v("\n继承了ManagerBase抽象类，实现ClusterManager接口类，实现session复制基本功能；")]),s._v(" "),e("p",[s._v("5.PersistentManagerBase抽象类"),e("br"),s._v("\n继承了ManagerBase抽象类，实现了session管理器持久化的基本功能；内部有一个Store存储类，具体实现有：FileStore和JDBCStore；")]),s._v(" "),e("p",[s._v("6.StandardManager类"),e("br"),s._v("\n继承ManagerBase抽象类，Tomcat默认的Session管理器（单机版）；对session提供了持久化功能，tomcat关闭的时候会将session保存到javax.servlet.context.tempdir路径下的SESSIONS.ser文件中，启动的时候会从此文件中加载session；")]),s._v(" "),e("p",[s._v("7.PersistentManager类"),e("br"),s._v("\n继承PersistentManagerBase抽象类，如果session空闲时间过长，将空闲session转换为存储，所以在findsession时会首先从内存中获取session，获取不到会多一步到store中获取，这也是PersistentManager类和StandardManager类的区别；")]),s._v(" "),e("p",[s._v("8.DeltaManager类"),e("br"),s._v("\n继承ClusterManagerBase，每一个节点session发生变更(增删改)，都会通知其他所有节点，其他所有节点进行更新操作，任何一个session在每个节点都有备份；")]),s._v(" "),e("p",[s._v("9.BackupManager类"),e("br"),s._v("\n继承ClusterManagerBase，会话数据只有一个备份节点，这个备份节点的位置集群中所有节点都可见；相比较DeltaManager数据传输量较小，当集群规模比较大时DeltaManager的数据传输量会非常大；")]),s._v(" "),e("p",[s._v("10.RedisSessionManager类"),e("br"),s._v("\n继承ManagerBase抽象类，非Tomcat内置的管理器，使用redis集中存储session，省去了节点之间的session复制，依赖redis的可靠性，比起sessin复制扩展性更好；")]),s._v(" "),e("h2",{attrs:{id:"session的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session的生命周期"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Session的生命周期")])]),s._v(" "),e("h3",{attrs:{id:"_1-解析获取requestedsessionid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-解析获取requestedsessionid"}},[s._v("#")]),s._v(" 1.解析获取requestedSessionId")]),s._v(" "),e("p",[s._v("当我们在类中通过request.getSession()时，tomcat是如何处理的，可以查看Request中的doGetSession方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('protected Session doGetSession(boolean create) {\n \n    // There cannot be a session if no context has been assigned yet\n    Context context = getContext();\n    if (context == null) {\n        return (null);\n    }\n \n    // Return the current session if it exists and is valid\n    if ((session != null) && !session.isValid()) {\n        session = null;\n    }\n    if (session != null) {\n        return (session);\n    }\n \n    // Return the requested session if it exists and is valid\n    Manager manager = context.getManager();\n    if (manager == null) {\n        return null;        // Sessions are not supported\n    }\n    if (requestedSessionId != null) {\n        try {\n            session = manager.findSession(requestedSessionId);\n        } catch (IOException e) {\n            session = null;\n        }\n        if ((session != null) && !session.isValid()) {\n            session = null;\n        }\n        if (session != null) {\n            session.access();\n            return (session);\n        }\n    }\n \n    // Create a new session if requested and the response is not committed\n    if (!create) {\n        return (null);\n    }\n    if ((response != null) &&\n            context.getServletContext().getEffectiveSessionTrackingModes().\n            contains(SessionTrackingMode.COOKIE) &&\n            response.getResponse().isCommitted()) {\n        throw new IllegalStateException\n        (sm.getString("coyoteRequest.sessionCreateCommitted"));\n    }\n \n    // Re-use session IDs provided by the client in very limited\n    // circumstances.\n    String sessionId = getRequestedSessionId();\n    if (requestedSessionSSL) {\n        // If the session ID has been obtained from the SSL handshake then\n        // use it.\n    } else if (("/".equals(context.getSessionCookiePath())\n            && isRequestedSessionIdFromCookie())) {\n        /* This is the common(ish) use case: using the same session ID with\n         * multiple web applications on the same host. Typically this is\n         * used by Portlet implementations. It only works if sessions are\n         * tracked via cookies. The cookie must have a path of "/" else it\n         * won\'t be provided for requests to all web applications.\n         *\n         * Any session ID provided by the client should be for a session\n         * that already exists somewhere on the host. Check if the context\n         * is configured for this to be confirmed.\n         */\n        if (context.getValidateClientProvidedNewSessionId()) {\n            boolean found = false;\n            for (Container container : getHost().findChildren()) {\n                Manager m = ((Context) container).getManager();\n                if (m != null) {\n                    try {\n                        if (m.findSession(sessionId) != null) {\n                            found = true;\n                            break;\n                        }\n                    } catch (IOException e) {\n                        // Ignore. Problems with this manager will be\n                        // handled elsewhere.\n                    }\n                }\n            }\n            if (!found) {\n                sessionId = null;\n            }\n        }\n    } else {\n        sessionId = null;\n    }\n    session = manager.createSession(sessionId);\n \n    // Creating a new session cookie based on that session\n    if ((session != null) && (getContext() != null)\n            && getContext().getServletContext().\n            getEffectiveSessionTrackingModes().contains(\n                    SessionTrackingMode.COOKIE)) {\n        Cookie cookie =\n                ApplicationSessionCookieConfig.createSessionCookie(\n                        context, session.getIdInternal(), isSecure());\n \n        response.addSessionCookieInternal(cookie);\n    }\n \n    if (session == null) {\n        return null;\n    }\n \n    session.access();\n    return session;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br")])]),e("p",[s._v("如果session已经存在，则直接返回；如果不存在则判定requestedSessionId是否为空，如果不为空则通过requestedSessionId到Session manager中获取session，如果为空，并且不是创建session操作，直接返回null；否则会调用Session manager创建一个新的session；"),e("br"),s._v("\n关于requestedSessionId是如何获取的，Tomcat内部可以支持从cookie和url中获取，具体可以查看CoyoteAdapter类的postParseRequest方法部分代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("String sessionID;\nif (request.getServletContext().getEffectiveSessionTrackingModes()\n        .contains(SessionTrackingMode.URL)) {\n \n    // Get the session ID if there was one\n    sessionID = request.getPathParameter(\n            SessionConfig.getSessionUriParamName(\n                    request.getContext()));\n    if (sessionID != null) {\n        request.setRequestedSessionId(sessionID);\n        request.setRequestedSessionURL(true);\n    }\n}\n \n// Look for session ID in cookies and SSL session\nparseSessionCookiesId(req, request);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("可以发现首先去url解析sessionId，如果获取不到则去cookie中获取，此处的SessionUriParamName=jsessionid；在cookie被浏览器禁用的情况下，我们可以看到url后面跟着参数jsessionid=xxxxxx；下面看一下parseSessionCookiesId方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('String sessionCookieName = SessionConfig.getSessionCookieName(context);\n \nfor (int i = 0; i < count; i++) {\n    ServerCookie scookie = serverCookies.getCookie(i);\n    if (scookie.getName().equals(sessionCookieName)) {\n        // Override anything requested in the URL\n        if (!request.isRequestedSessionIdFromCookie()) {\n            // Accept only the first session id cookie\n            convertMB(scookie.getValue());\n            request.setRequestedSessionId\n                (scookie.getValue().toString());\n            request.setRequestedSessionCookie(true);\n            request.setRequestedSessionURL(false);\n            if (log.isDebugEnabled()) {\n                log.debug(" Requested cookie session id is " +\n                    request.getRequestedSessionId());\n            }\n        } else {\n            if (!request.isRequestedSessionIdValid()) {\n                // Replace the session id until one is valid\n                convertMB(scookie.getValue());\n                request.setRequestedSessionId\n                    (scookie.getValue().toString());\n            }\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("sessionCookieName也是jsessionid，然后遍历cookie，从里面找出name=jsessionid的值赋值给request的requestedSessionId属性；")]),s._v(" "),e("h3",{attrs:{id:"_2-findsession查询session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-findsession查询session"}},[s._v("#")]),s._v(" 2.findSession查询session")]),s._v(" "),e("p",[s._v("获取到requestedSessionId之后，会通过此id去session Manager中获取session，不同的管理器获取的方式不一样，已默认的StandardManager为例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("protected Map<String, Session> sessions = new ConcurrentHashMap<String, Session>();\n \npublic Session findSession(String id) throws IOException {\n    if (id == null) {\n        return null;\n    }\n    return sessions.get(id);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"_3-createsession创建session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-createsession创建session"}},[s._v("#")]),s._v(" 3.createSession创建session")]),s._v(" "),e("p",[s._v("没有获取到session，指定了create=true，则创建session，已默认的StandardManager为例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public Session createSession(String sessionId) {\n     \n    if ((maxActiveSessions >= 0) &&\n            (getActiveSessions() >= maxActiveSessions)) {\n        rejectedSessions++;\n        throw new TooManyActiveSessionsException(\n                sm.getString("managerBase.createSession.ise"),\n                maxActiveSessions);\n    }\n     \n    // Recycle or create a Session instance\n    Session session = createEmptySession();\n \n    // Initialize the properties of the new session and return it\n    session.setNew(true);\n    session.setValid(true);\n    session.setCreationTime(System.currentTimeMillis());\n    session.setMaxInactiveInterval(((Context) getContainer()).getSessionTimeout() * 60);\n    String id = sessionId;\n    if (id == null) {\n        id = generateSessionId();\n    }\n    session.setId(id);\n    sessionCounter++;\n \n    SessionTiming timing = new SessionTiming(session.getCreationTime(), 0);\n    synchronized (sessionCreationTiming) {\n        sessionCreationTiming.add(timing);\n        sessionCreationTiming.poll();\n    }\n    return (session);\n \n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("p",[s._v("如果传的sessionId为空，tomcat会生成一个唯一的sessionId，具体可以参考类StandardSessionIdGenerator的generateSessionId方法；这里发现创建完session之后并没有把session放入ConcurrentHashMap中，其实在session.setId(id)中处理了，具体代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void setId(String id, boolean notify) {\n \n    if ((this.id != null) && (manager != null))\n        manager.remove(this);\n \n    this.id = id;\n \n    if (manager != null)\n        manager.add(this);\n \n    if (notify) {\n        tellNew();\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h3",{attrs:{id:"_4-销毁session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-销毁session"}},[s._v("#")]),s._v(" 4.销毁Session")]),s._v(" "),e("p",[s._v("Tomcat会定期检测出不活跃的session，然后将其删除，一方面session占用内存，另一方面是安全性的考虑；启动tomcat的同时会启动一个后台线程用来检测过期的session，具体可以查看ContainerBase的内部类ContainerBackgroundProcessor：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('protected class ContainerBackgroundProcessor implements Runnable {\n \n     @Override\n     public void run() {\n         Throwable t = null;\n         String unexpectedDeathMessage = sm.getString(\n                 "containerBase.backgroundProcess.unexpectedThreadDeath",\n                 Thread.currentThread().getName());\n         try {\n             while (!threadDone) {\n                 try {\n                     Thread.sleep(backgroundProcessorDelay * 1000L);\n                 } catch (InterruptedException e) {\n                     // Ignore\n                 }\n                 if (!threadDone) {\n                     Container parent = (Container) getMappingObject();\n                     ClassLoader cl =\n                         Thread.currentThread().getContextClassLoader();\n                     if (parent.getLoader() != null) {\n                         cl = parent.getLoader().getClassLoader();\n                     }\n                     processChildren(parent, cl);\n                 }\n             }\n         } catch (RuntimeException e) {\n             t = e;\n             throw e;\n         } catch (Error e) {\n             t = e;\n             throw e;\n         } finally {\n             if (!threadDone) {\n                 log.error(unexpectedDeathMessage, t);\n             }\n         }\n     }\n \n     protected void processChildren(Container container, ClassLoader cl) {\n         try {\n             if (container.getLoader() != null) {\n                 Thread.currentThread().setContextClassLoader\n                     (container.getLoader().getClassLoader());\n             }\n             container.backgroundProcess();\n         } catch (Throwable t) {\n             ExceptionUtils.handleThrowable(t);\n             log.error("Exception invoking periodic operation: ", t);\n         } finally {\n             Thread.currentThread().setContextClassLoader(cl);\n         }\n         Container[] children = container.findChildren();\n         for (int i = 0; i < children.length; i++) {\n             if (children[i].getBackgroundProcessorDelay() <= 0) {\n                 processChildren(children[i], cl);\n             }\n         }\n     }\n }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br")])]),e("p",[s._v("backgroundProcessorDelay默认值是10，也就是每10秒检测一次，然后调用Container的backgroundProcess方法，此方法又调用Manager里面的backgroundProcess：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public void backgroundProcess() {\n    count = (count + 1) % processExpiresFrequency;\n    if (count == 0)\n        processExpires();\n}\n \n/**\n * Invalidate all sessions that have expired.\n */\npublic void processExpires() {\n \n    long timeNow = System.currentTimeMillis();\n    Session sessions[] = findSessions();\n    int expireHere = 0 ;\n     \n    if(log.isDebugEnabled())\n        log.debug("Start expire sessions " + getName() + " at " + timeNow + " sessioncount " + sessions.length);\n    for (int i = 0; i < sessions.length; i++) {\n        if (sessions[i]!=null && !sessions[i].isValid()) {\n            expireHere++;\n        }\n    }\n    long timeEnd = System.currentTimeMillis();\n    if(log.isDebugEnabled())\n         log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);\n    processingTime += ( timeEnd - timeNow );\n \n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("processExpiresFrequency默认值是6，那其实最后就是6*10=60秒执行一次processExpires，具体如何检测过期在session的isValid方法中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public boolean isValid() {\n \n    if (!this.isValid) {\n        return false;\n    }\n \n    if (this.expiring) {\n        return true;\n    }\n \n    if (ACTIVITY_CHECK && accessCount.get() > 0) {\n        return true;\n    }\n \n    if (maxInactiveInterval > 0) {\n        long timeNow = System.currentTimeMillis();\n        int timeIdle;\n        if (LAST_ACCESS_AT_START) {\n            timeIdle = (int) ((timeNow - lastAccessedTime) / 1000L);\n        } else {\n            timeIdle = (int) ((timeNow - thisAccessedTime) / 1000L);\n        }\n        if (timeIdle >= maxInactiveInterval) {\n            expire(true);\n        }\n    }\n \n    return this.isValid;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[s._v("主要是通过对比当前时间到上次活跃的时间是否超过了maxInactiveInterval，如果超过了就做expire处理；")]),s._v(" "),e("h2",{attrs:{id:"redis集中式管理session分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis集中式管理session分析"}},[s._v("#")]),s._v(" "),e("strong",[s._v("Redis集中式管理Session分析")])]),s._v(" "),e("p",[s._v("在上文中使用"),e("a",{attrs:{href:"https://github.com/jcoleman/tomcat-redis-session-manager",target:"_blank",rel:"noopener noreferrer"}},[s._v("tomcat-redis-session-manager"),e("OutboundLink")],1),s._v("来管理session，下面来分析一下是如果通过redis来集中式管理Session的；围绕session如何获取，如何创建，何时更新到redis，以及何时被移除；")]),s._v(" "),e("h3",{attrs:{id:"_1-如何获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何获取"}},[s._v("#")]),s._v(" 1.如何获取")]),s._v(" "),e("p",[s._v("RedisSessionManager重写了findSession方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public Session findSession(String id) throws IOException {\n    RedisSession session = null;\n \n    if (null == id) {\n      currentSessionIsPersisted.set(false);\n      currentSession.set(null);\n      currentSessionSerializationMetadata.set(null);\n      currentSessionId.set(null);\n    } else if (id.equals(currentSessionId.get())) {\n      session = currentSession.get();\n    } else {\n      byte[] data = loadSessionDataFromRedis(id);\n      if (data != null) {\n        DeserializedSessionContainer container = sessionFromSerializedData(id, data);\n        session = container.session;\n        currentSession.set(session);\n        currentSessionSerializationMetadata.set(container.metadata);\n        currentSessionIsPersisted.set(true);\n        currentSessionId.set(id);\n      } else {\n        currentSessionIsPersisted.set(false);\n        currentSession.set(null);\n        currentSessionSerializationMetadata.set(null);\n        currentSessionId.set(null);\n      }\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("p",[s._v("sessionId不为空的情况下，会先比较sessionId是否等于currentSessionId中的sessionId，如果等于则从currentSession中取出session，currentSessionId和currentSession都是ThreadLocal变量，这里并没有直接从redis里面取数据，如果同一线程没有去处理其他用户信息，是可以直接从内存中取出的，提高了性能；最后才从redis里面获取数据，从redis里面获取的是一段二进制数据，需要进行反序列化操作，相关序列化和反序列化都在JavaSerializer类中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void deserializeInto(byte[] data, RedisSession session, SessionSerializationMetadata metadata)\n        throws IOException, ClassNotFoundException {\n    BufferedInputStream bis = new BufferedInputStream(new ByteArrayInputStream(data));\n    Throwable arg4 = null;\n \n    try {\n        CustomObjectInputStream x2 = new CustomObjectInputStream(bis, this.loader);\n        Throwable arg6 = null;\n \n        try {\n            SessionSerializationMetadata x21 = (SessionSerializationMetadata) x2.readObject();\n            metadata.copyFieldsFrom(x21);\n            session.readObjectData(x2);\n        } catch (Throwable arg29) {\n    ......\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("二进制数据中保存了2个对象，分别是SessionSerializationMetadata和RedisSession，SessionSerializationMetadata里面保存的是Session中的attributes信息，RedisSession其实也有attributes数据，相当于这份数据保存了2份；")]),s._v(" "),e("h3",{attrs:{id:"_2-如何创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何创建"}},[s._v("#")]),s._v(" 2.如何创建")]),s._v(" "),e("p",[s._v("同样RedisSessionManager重写了createSession方法，2个重要的点分别：sessionId的唯一性问题和session保存到redis中;")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// Ensure generation of a unique session identifier.\nif (null != requestedSessionId) {\n  sessionId = sessionIdWithJvmRoute(requestedSessionId, jvmRoute);\n  if (jedis.setnx(sessionId.getBytes(), NULL_SESSION) == 0L) {\n    sessionId = null;\n  }\n} else {\n  do {\n    sessionId = sessionIdWithJvmRoute(generateSessionId(), jvmRoute);\n  } while (jedis.setnx(sessionId.getBytes(), NULL_SESSION) == 0L); // 1 = key set; 0 = key already existed\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("分布式环境下有可能出现生成的sessionId相同的情况，所以需要确保唯一性；保存session到redis中是最核心的一个方法，何时更新，何时过期都在此方法中处理；")]),s._v(" "),e("h3",{attrs:{id:"_3-何时更新到redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-何时更新到redis"}},[s._v("#")]),s._v(" 3.何时更新到redis")]),s._v(" "),e("p",[s._v("具体看saveInternal方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('protected boolean saveInternal(Jedis jedis, Session session, boolean forceSave) throws IOException {\n    Boolean error = true;\n \n    try {\n      log.trace("Saving session " + session + " into Redis");\n \n      RedisSession redisSession = (RedisSession)session;\n \n      if (log.isTraceEnabled()) {\n        log.trace("Session Contents [" + redisSession.getId() + "]:");\n        Enumeration en = redisSession.getAttributeNames();\n        while(en.hasMoreElements()) {\n          log.trace("  " + en.nextElement());\n        }\n      }\n \n      byte[] binaryId = redisSession.getId().getBytes();\n \n      Boolean isCurrentSessionPersisted;\n      SessionSerializationMetadata sessionSerializationMetadata = currentSessionSerializationMetadata.get();\n      byte[] originalSessionAttributesHash = sessionSerializationMetadata.getSessionAttributesHash();\n      byte[] sessionAttributesHash = null;\n      if (\n           forceSave\n           || redisSession.isDirty()\n           || null == (isCurrentSessionPersisted = this.currentSessionIsPersisted.get())\n            || !isCurrentSessionPersisted\n           || !Arrays.equals(originalSessionAttributesHash, (sessionAttributesHash = serializer.attributesHashFrom(redisSession)))\n         ) {\n \n        log.trace("Save was determined to be necessary");\n \n        if (null == sessionAttributesHash) {\n          sessionAttributesHash = serializer.attributesHashFrom(redisSession);\n        }\n \n        SessionSerializationMetadata updatedSerializationMetadata = new SessionSerializationMetadata();\n        updatedSerializationMetadata.setSessionAttributesHash(sessionAttributesHash);\n \n        jedis.set(binaryId, serializer.serializeFrom(redisSession, updatedSerializationMetadata));\n \n        redisSession.resetDirtyTracking();\n        currentSessionSerializationMetadata.set(updatedSerializationMetadata);\n        currentSessionIsPersisted.set(true);\n      } else {\n        log.trace("Save was determined to be unnecessary");\n      }\n \n      log.trace("Setting expire timeout on session [" + redisSession.getId() + "] to " + getMaxInactiveInterval());\n      jedis.expire(binaryId, getMaxInactiveInterval());\n \n      error = false;\n \n      return error;\n    } catch (IOException e) {\n      log.error(e.getMessage());\n \n      throw e;\n    } finally {\n      return error;\n    }\n  }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br")])]),e("p",[s._v("以上方法中大致有5中情况下需要保存数据到redis中，分别是：forceSave，redisSession.isDirty()，null == (isCurrentSessionPersisted = this.currentSessionIsPersisted.get())，!isCurrentSessionPersisted以及!Arrays.equals(originalSessionAttributesHash, (sessionAttributesHash = serializer.attributesHashFrom(redisSession)))其中一个为true的情况下保存数据到reids中；")]),s._v(" "),e("p",[s._v("3.1重点看一下forceSave，可以理解forceSave就是内置保存策略的一个标识，提供了三种内置保存策略："),e("strong",[s._v("DEFAULT,SAVE_ON_CHANGE,ALWAYS_SAVE_AFTER_REQUEST")]),e("br"),s._v(" "),e("strong",[s._v("DEFAULT")]),s._v("：默认保存策略，依赖其他四种情况保存session，"),e("br"),s._v(" "),e("strong",[s._v("SAVE_ON_CHANGE")]),s._v("：每次session.setAttribute()、session.removeAttribute()触发都会保存，"),e("br"),s._v(" "),e("strong",[s._v("ALWAYS_SAVE_AFTER_REQUEST")]),s._v("：每一个request请求后都强制保存，无论是否检测到变化；")]),s._v(" "),e("p",[s._v("3.2redisSession.isDirty()检测session内部是否有脏数据")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public Boolean isDirty() {\n    return Boolean.valueOf(this.dirty.booleanValue() || !this.changedAttributes.isEmpty());\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("每一个request请求后检测是否有脏数据，有脏数据才保存，实时性没有SAVE_ON_CHANGE高，但是也没有ALWAYS_SAVE_AFTER_REQUEST来的粗暴；")]),s._v(" "),e("p",[s._v("3.3后面三种情况都是用来检测三个ThreadLocal变量；")]),s._v(" "),e("h3",{attrs:{id:"_4-何时被移除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-何时被移除"}},[s._v("#")]),s._v(" 4.何时被移除")]),s._v(" "),e("p",[s._v("上一节中介绍了Tomcat内置看定期检测session是否过期，ManagerBase中提供了processExpires方法来处理session过去的问题，但是在RedisSessionManager重写了此方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void processExpires() {\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("直接不做处理了，具体是利用了redis的设置生存时间功能，具体在saveInternal方法中：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("jedis.expire(binaryId, getMaxInactiveInterval());\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" "),e("strong",[s._v("总结")])]),s._v(" "),e("p",[s._v("本文大致分析了Tomcat Session管理器，以及tomcat-redis-session-manager是如何进行session集中式管理的，但是此工具完全依赖tomcat容器，如果想完全独立于应用服务器的方案，"),e("a",{attrs:{href:"https://github.com/spring-projects/spring-session",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring session"),e("OutboundLink")],1),s._v("是一个不错的选择。")])])}),[],!1,null,null,null);n.default=i.exports}}]);