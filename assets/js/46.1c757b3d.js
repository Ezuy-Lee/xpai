(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{473:function(a,s,e){"use strict";e.r(s);var t=e(15),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("p",[a._v("最近在看Mybatis的源码，刚好看到缓存这一块，Mybatis提供了一级缓存和二级缓存；一级缓存相对来说比较简单，功能比较齐全的是二级缓存，基本上满足了一个缓存该有的功能；当然如果拿来和专门的缓存框架如ehcache来对比可能稍有差距；本文我们将来整理一下实现一个本地缓存都应该需要考虑哪些东西。")]),a._v(" "),e("h2",{attrs:{id:"考虑点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#考虑点"}},[a._v("#")]),a._v(" 考虑点")]),a._v(" "),e("p",[a._v("考虑点主要在数据用何种方式存储，能存储多少数据，多余的数据如何处理等几个点，下面我们来详细的介绍每个考虑点，以及该如何去实现；")]),a._v(" "),e("h3",{attrs:{id:"_1-数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构"}},[a._v("#")]),a._v(" 1.数据结构")]),a._v(" "),e("p",[a._v("首要考虑的就是数据该如何存储，用什么数据结构存储，最简单的就直接用Map来存储数据；或者复杂的如redis一样提供了多种数据类型哈希，列表，集合，有序集合等，底层使用了双端链表，压缩列表，集合，跳跃表等数据结构；")]),a._v(" "),e("h3",{attrs:{id:"_2-对象上限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象上限"}},[a._v("#")]),a._v(" 2.对象上限")]),a._v(" "),e("p",[a._v("因为是本地缓存，内存有上限，所以一般都会指定缓存对象的数量比如1024，当达到某个上限后需要有某种策略去删除多余的数据；")]),a._v(" "),e("h3",{attrs:{id:"_3-清除策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-清除策略"}},[a._v("#")]),a._v(" 3.清除策略")]),a._v(" "),e("p",[a._v("上面说到当达到对象上限之后需要有清除策略，常见的比如有LRU(最近最少使用)、FIFO(先进先出)、LFU(最近最不常用)、SOFT(软引用)、WEAK(弱引用)等策略；")]),a._v(" "),e("h3",{attrs:{id:"_4-过期时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-过期时间"}},[a._v("#")]),a._v(" 4.过期时间")]),a._v(" "),e("p",[a._v("除了使用清除策略，一般本地缓存也会有一个过期时间设置，比如redis可以给每个key设置一个过期时间，这样当达到过期时间之后直接删除，采用清除策略+过期时间双重保证；")]),a._v(" "),e("h3",{attrs:{id:"_5-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程安全"}},[a._v("#")]),a._v(" 5.线程安全")]),a._v(" "),e("p",[a._v("像redis是直接使用单线程处理，所以就不存在线程安全问题；而我们现在提供的本地缓存往往是可以多个线程同时访问的，所以线程安全是不容忽视的问题；并且线程安全问题是不应该抛给使用者去保证；")]),a._v(" "),e("h3",{attrs:{id:"_6-简明的接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-简明的接口"}},[a._v("#")]),a._v(" 6.简明的接口")]),a._v(" "),e("p",[a._v("提供一个傻瓜式的对外接口是很有必要的，对使用者来说使用此缓存不是一种负担而是一种享受；提供常用的get，put，remove，clear，getSize方法即可；")]),a._v(" "),e("h3",{attrs:{id:"_7-是否持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-是否持久化"}},[a._v("#")]),a._v(" 7.是否持久化")]),a._v(" "),e("p",[a._v("这个其实不是必须的，是否需要将缓存数据持久化看需求；本地缓存如ehcache是支持持久化的，而guava是没有持久化功能的；分布式缓存如redis是有持久化功能的，memcached是没有持久化功能的；")]),a._v(" "),e("h3",{attrs:{id:"_8-阻塞机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-阻塞机制"}},[a._v("#")]),a._v(" 8.阻塞机制")]),a._v(" "),e("p",[a._v("在看Mybatis源码的时候，二级缓存提供了一个blocking标识，表示当在缓存中找不到元素时，它设置对缓存键的锁定；这样其他线程将等待此元素被填充，而不是命中数据库；其实我们使用缓存的目的就是因为被缓存的数据生成比较费时，比如调用对外的接口，查询数据库，计算量很大的结果等等；这时候如果多个线程同时调用get方法获取的结果都为null，每个线程都去执行一遍费时的计算，其实也是对资源的浪费；最好的办法是只有一个线程去执行，其他线程等待，计算一次就够了；但是此功能基本上都交给使用者来处理，很少有本地缓存有这种功能；")]),a._v(" "),e("h2",{attrs:{id:"如何实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现"}},[a._v("#")]),a._v(" 如何实现")]),a._v(" "),e("p",[a._v("以上大致介绍了实现一个本地缓存我们都有哪些需要考虑的地方，当然可能还有其他没有考虑到的点；下面继续看看关于每个点都应该如何去实现，重点介绍一下思路；")]),a._v(" "),e("h3",{attrs:{id:"_1-数据结构-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构-2"}},[a._v("#")]),a._v(" 1.数据结构")]),a._v(" "),e("p",[a._v("本地缓存最常见的是直接使用Map来存储，比如guava使用ConcurrentHashMap，ehcache也是用了ConcurrentHashMap，Mybatis二级缓存使用HashMap来存储：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Map<Object, Object> cache = new ConcurrentHashMap<Object, Object>()\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("Mybatis使用HashMap本身是非线程安全的，所以可以看到起内部使用了一个SynchronizedCache用来包装，保证线程的安全性；"),e("br"),a._v("\n当然除了使用Map来存储，可能还使用其他数据结构来存储，比如redis使用了双端链表，压缩列表，整数集合，跳跃表和字典；当然这主要是因为redis对外提供的接口很丰富除了哈希还有列表，集合，有序集合等功能；")]),a._v(" "),e("h3",{attrs:{id:"_2-对象上限-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象上限-2"}},[a._v("#")]),a._v(" 2.对象上限")]),a._v(" "),e("p",[a._v("本地缓存常见的一个属性，一般缓存都会有一个默认值比如1024，在用户没有指定的情况下默认指定；当缓存的数据达到指定最大值时，需要有相关策略从缓存中清除多余的数据这就涉及到下面要介绍的清除策略；")]),a._v(" "),e("h3",{attrs:{id:"_3-清除策略-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-清除策略-2"}},[a._v("#")]),a._v(" 3.清除策略")]),a._v(" "),e("p",[a._v("配合对象上限之后使用，场景的清除策略如：LRU(最近最少使用)、FIFO(先进先出)、LFU(最近最不常用)、SOFT(软引用)、WEAK(弱引用)；"),e("br"),a._v(" "),e("strong",[a._v("LRU")]),a._v("：Least Recently Used的缩写最近最少使用，移除最长时间不被使用的对象；常见的使用LinkedHashMap来实现，也是很多本地缓存默认使用的策略；"),e("br"),a._v(" "),e("strong",[a._v("FIFO")]),a._v("：先进先出，按对象进入缓存的顺序来移除它们；常见使用队列Queue来实现；"),e("br"),a._v(" "),e("strong",[a._v("LFU")]),a._v("：Least Frequently Used的缩写大概也是最近最少使用的意思，和LRU有点像；区别点在LRU的淘汰规则是基于访问时间，而LFU是基于访问次数的；可以通过HashMap并且记录访问次数来实现；"),e("br"),a._v(" "),e("strong",[a._v("SOFT")]),a._v("：软引用基于垃圾回收器状态和软引用规则移除对象；常见使用SoftReference来实现；"),e("br"),a._v(" "),e("strong",[a._v("WEAK")]),a._v("：弱引用更积极地基于垃圾收集器状态和弱引用规则移除对象；常见使用WeakReference来实现；")]),a._v(" "),e("h3",{attrs:{id:"_4-过期时间-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-过期时间-2"}},[a._v("#")]),a._v(" 4.过期时间")]),a._v(" "),e("p",[a._v("设置过期时间，让缓存数据在指定时间过后自动删除；常见的过期数据删除策略有两种方式：被动删除和主动删除；"),e("br"),a._v(" "),e("strong",[a._v("被动删除")]),a._v("：每次进行get/put操作的时候都会检查一下当前key是否已经过期，如果过期则删除，类似如下代码：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (System.currentTimeMillis() - lastClear > clearInterval) {\n      clear();\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[e("strong",[a._v("主动删除")]),a._v("：专门有一个job在后台定期去检查数据是否过期，如果过期则删除，这其实可以有效的处理冷数据；")]),a._v(" "),e("h3",{attrs:{id:"_5-线程安全-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程安全-2"}},[a._v("#")]),a._v(" 5.线程安全")]),a._v(" "),e("p",[a._v("尽量用线程安全的类去存储数据，比如使用ConcurrentHashMap代替HashMap；或者提供相应的同步处理类，比如Mybatis提供了SynchronizedCache：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" public synchronized void putObject(Object key, Object object) {\n    ...省略...\n  }\n\n  @Override\n  public synchronized Object getObject(Object key) {\n    ...省略...\n  }\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("h3",{attrs:{id:"_6-简明的接口-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-简明的接口-2"}},[a._v("#")]),a._v(" 6.简明的接口")]),a._v(" "),e("p",[a._v("提供常用的get，put，remove，clear，getSize方法即可，比如Mybatis的Cache接口：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public interface Cache {\n  String getId();\n  void putObject(Object key, Object value);\n  Object getObject(Object key);\n  Object removeObject(Object key);\n  void clear();\n  int getSize();\n  ReadWriteLock getReadWriteLock();\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("p",[a._v("再来看看guava提供的Cache接口，相对来说也是比较简洁的：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public interface Cache<K, V> {\n  V getIfPresent(@CompatibleWith("K") Object key);\n  V get(K key, Callable<? extends V> loader) throws ExecutionException;\n  ImmutableMap<K, V> getAllPresent(Iterable<?> keys);\n  void put(K key, V value);\n  void putAll(Map<? extends K, ? extends V> m);\n  void invalidate(@CompatibleWith("K") Object key);\n  void invalidateAll(Iterable<?> keys);\n  void invalidateAll();\n  long size();\n  CacheStats stats();\n  ConcurrentMap<K, V> asMap();\n  void cleanUp();\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br")])]),e("h3",{attrs:{id:"_7-是否持久化-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-是否持久化-2"}},[a._v("#")]),a._v(" 7.是否持久化")]),a._v(" "),e("p",[a._v("持久化的好处是重启之后可以再次加载文件中的数据，这样就起到类似热加载的功效；比如ehcache提供了是否持久化磁盘缓存的功能，将缓存数据存放在一个.data文件中；")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('diskPersistent="false" //是否持久化磁盘缓存\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("redis更是将持久化功能发挥到极致，慢慢的有点像数据库了；提供了AOF和RDB两种持久化方式；当然很多情况下可以配合使用两种方式；")]),a._v(" "),e("h3",{attrs:{id:"_8-阻塞机制-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-阻塞机制-2"}},[a._v("#")]),a._v(" 8.阻塞机制")]),a._v(" "),e("p",[a._v("除了在Mybatis中看到了BlockingCache来实现此功能，之前在看**<<java并发编程实战>>**的时候其中有实现一个很完美的缓存，大致代码如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class Memoizerl<A, V> implements Computable<A, V> {\n    private final Map<A, Future<V>> cache = new ConcurrentHashMap<A, Future<V>>();\n    private final Computable<A, V> c;\n\n    public Memoizerl(Computable<A, V> c) {\n        this.c = c;\n    }\n\n    @Override\n    public V compute(A arg) throws InterruptedException, ExecutionException {\n        while (true) {\n            Future<V> f = cache.get(arg);\n            if (f == null) {\n                Callable<V> eval = new Callable<V>() {\n                    @Override\n                    public V call() throws Exception {\n                        return c.compute(arg);\n                    }\n                };\n                FutureTask<V> ft = new FutureTask<V>(eval);\n                f = cache.putIfAbsent(arg, ft);\n                if (f == null) {\n                    f = ft;\n                    ft.run();\n                }\n                try {\n                    return f.get();\n                } catch (CancellationException e) {\n                    cache.remove(arg, f);\n                }\n            }\n        }\n    }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br"),e("span",{staticClass:"line-number"},[a._v("34")]),e("br")])]),e("p",[a._v("compute是一个计算很费时的方法，所以这里把计算的结果缓存起来，但是有个问题就是如果两个线程同时进入此方法中怎么保证只计算一次，这里最核心的地方在于使用了ConcurrentHashMap的putIfAbsent方法，同时只会写入一个FutureTask；")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("本文大致介绍了要设计一个本地缓存都需要考虑哪些点：数据结构，对象上限，清除策略，过期时间，线程安全，阻塞机制，实用的接口，是否持久化；当然肯定有其他考虑点，欢迎补充。")])])}),[],!1,null,null,null);s.default=n.exports}}]);