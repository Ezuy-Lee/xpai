(window.webpackJsonp=window.webpackJsonp||[]).push([[341],{769:function(e,s,a){"use strict";a.r(s);var n=a(15),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("随着微服务的流行，单体应用被拆分成一个个独立的微进程，可能一个简单的请求，需要多个微服务共同处理，这样其实是增加了出错的概率，所以如何保证在单个微服务出现问题的时候，对整个系统的负面影响降到最低，这就需要用到我们今天要介绍的线程隔离。")]),e._v(" "),a("h2",{attrs:{id:"线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型"}},[e._v("#")]),e._v(" 线程模型")]),e._v(" "),a("p",[e._v("在介绍线程隔离之前，我们先了解一下主流容器，框架的线程模型，因为微服务是一个个独立的进程，之间的调用其实就是走网络io，网络io的处理容器如tomcat，通信框架如netty，微服务框架如dubbo，都很好的帮我们处理了底层的网络io流，让我们可以更加的关注于业务处理；")]),e._v(" "),a("h3",{attrs:{id:"netty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netty"}},[e._v("#")]),e._v(" Netty")]),e._v(" "),a("p",[e._v("Netty是基于java nio的高性能通信框架，使用了"),a("strong",[e._v("主从多线程模型")]),e._v("，借鉴"),a("a",{attrs:{href:"https://www.infoq.cn/article/netty-threading-model",target:"_blank",rel:"noopener noreferrer"}},[e._v("Netty系列之 Netty线程模型"),a("OutboundLink")],1),e._v("的一张图片如下所示："),a("br"),e._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-4c35d4a4031f5555a307cb0f91a1121a2f5.png",alt:""}}),a("br"),e._v("\n主线程负责认证，连接，成功之后交由从线程负责连接的读写操作，大致如下代码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EventLoopGroup bossGroup = new NioEventLoopGroup(1);\nEventLoopGroup workerGroup = new NioEventLoopGroup();\n\nServerBootstrap b = new ServerBootstrap();\nb.group(bossGroup, workerGroup);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("主线程是一个单线程，从线程是一个默认为cpu*2个数的线程池，可以在我们的业务handler中做一个简单测试：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        System.out.println("thread name=" + Thread.currentThread().getName() + " server receive msg=" + msg);\n    }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("服务端在读取数据的时候打印一下当前的线程：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('thread name=nioEventLoopGroup-3-1 server receive msg="..."\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("可以发现这里使用的线程其实和处理io线程是同一个；")]),e._v(" "),a("h3",{attrs:{id:"dubbo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[e._v("#")]),e._v(" Dubbo")]),e._v(" "),a("p",[e._v("Dubbo的底层通信框架其实使用的就是Netty，但是Dubbo并没有直接使用Netty的io线程来处理业务，可以简单在生产者端输出当前线程名称：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("thread name=DubboServerHandler-192.168.1.115:20880-thread-2,...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("可以发现业务逻辑使用并不是nioEventLoopGroup线程，这是因为Dubbo有自己的线程模型，可以看看官网提供的模型图："),a("br"),e._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-351198892ecdb5b432de5ef726390add1b2.JPEG",alt:""}}),a("br"),e._v("\n其中的Dispatcher调度器可以配置消息的处理线程：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("all")]),e._v("所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。")]),e._v(" "),a("li",[a("code",[e._v("direct")]),e._v("所有消息都不派发到线程池，全部在 IO 线程上直接执行。")]),e._v(" "),a("li",[a("code",[e._v("message")]),e._v("只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。")]),e._v(" "),a("li",[a("code",[e._v("execution")]),e._v("只有请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。")]),e._v(" "),a("li",[a("code",[e._v("connection")]),e._v("在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。")])]),e._v(" "),a("p",[e._v("Dubbo默认使用"),a("strong",[e._v("FixedThreadPool")]),e._v("，线程数默认为"),a("strong",[e._v("200")]),e._v("；")]),e._v(" "),a("h3",{attrs:{id:"tomcat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[e._v("#")]),e._v(" Tomcat")]),e._v(" "),a("p",[e._v("Tomcat可以配置四种线程模型：BIO，NIO，APR，AIO；Tomcat8开始默认配置NIO，此模型和Netty的线程模型很像，可以理解为都是Reactor模式，在此不过多介绍；其中"),a("strong",[e._v("maxThreads")]),e._v("参数配置专门处理IO的Worker数，默认是200；可以在业务Controller中输出当前线程名称：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ThreadName=http-nio-8888-exec-1...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("可以发现处理业务的线程就是Tomcat的io线程；")]),e._v(" "),a("h2",{attrs:{id:"为什么要线程隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要线程隔离"}},[e._v("#")]),e._v(" 为什么要线程隔离")]),e._v(" "),a("p",[e._v("从上面的介绍的线程模型可以知道，处理业务的时候还是使用的io线程比如Tomcat和netty，这样会有什么问题那，比如当前服务进程需要同步调用另外三个微服务，但是由于某个服务出现问题，导致线程阻塞，然后阻塞越积越多，占满所有的io线程，最终当前服务无法接受数据，直至奔溃；"),a("br"),e._v("\nDubbo本身做了IO线程和业务线程的隔离，出现问题不至于影响IO线程，但是如果同样有以上的问题，业务线程也会被占满；"),a("br"),e._v("\n做线程隔离的目的就是如果某个服务出现问题可以把它控制在一个小的范围，不至于影响到全局；")]),e._v(" "),a("h2",{attrs:{id:"如何做线程隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何做线程隔离"}},[e._v("#")]),e._v(" 如何做线程隔离")]),e._v(" "),a("p",[e._v("做线程隔离原理也很简单，给每个请求分配单独的线程池，每个请求做到互不影响，当然也可以使用一些成熟的框架比如Hystrix(已经不更新了)，Sentinel等；")]),e._v(" "),a("h3",{attrs:{id:"线程池隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池隔离"}},[e._v("#")]),e._v(" 线程池隔离")]),e._v(" "),a("p",[e._v("SpringBoot+Tomcat做一个简单的隔离测试，为了方便模拟配置MaxThreads=5，提供隔离Controller，大致如下所示：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RequestMapping("/h1")\nString home() throws Exception {\n    System.out.println("h1--\x3eThreadName=" + Thread.currentThread().getName());\n    Thread.sleep(200000);\n    return "h1";\n}\n    \n@RequestMapping("/h3")\nString home3() {\n    System.out.println("h3--\x3eThreadName=" + Thread.currentThread().getName());\n    return "h3";\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[e._v("请求5次**/h1"),a("strong",[e._v("请求，再次请求")]),e._v("/h3**，观察日志：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("h1--\x3eThreadName=http-nio-8888-exec-1\nh1--\x3eThreadName=http-nio-8888-exec-2\nh1--\x3eThreadName=http-nio-8888-exec-3\nh1--\x3eThreadName=http-nio-8888-exec-4\nh1--\x3eThreadName=http-nio-8888-exec-5\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("可以发现h1请求占满了5条线程，请求h3的时候Tomcat无法接受请求；改造一下h1请求使用使用线程池来处理：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ExecutorService executorService = Executors.newFixedThreadPool(2);\nList<Future<String>> list = new CopyOnWriteArrayList<Future<String>>();\n@RequestMapping("/h2")\nString home2() throws Exception {\n    Future<String> result = executorService.submit(new Callable<String>() {\n        @Override\n        public String call() throws Exception {\n            System.out.println("h2--\x3eThreadName=" + Thread.currentThread().getName());\n            Thread.sleep(200000);\n            return "h2";\n        }\n    });\n    list.add(result);\n    //降级处理\n    if (list.size() >= 3) {\n        return "h2-fallback";\n    }\n    String resultStr = result.get();\n    list.remove(result);\n    return resultStr;\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br")])]),a("p",[e._v("如上部分伪代码，使用线程池异步执行，并且超出限制范围做降级处理，这样再次请求h3的时候，就不受影响了；当然上面代码比较简陋，我们可以使用成熟的隔离框架；")]),e._v(" "),a("h3",{attrs:{id:"hystrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix"}},[e._v("#")]),e._v(" Hystrix")]),e._v(" "),a("p",[e._v("Hystrix 提供两种隔离策略：线程池隔离（Bulkhead Pattern）和信号量隔离，其中最推荐也是最常用的是线程池隔离。Hystrix的线程池隔离针对不同的资源分别创建不同的线程池，不同服务调用都发生在不同的线程池中，在线程池排队、超时等阻塞情况时可以快速失败，并可以提供fallback机制；可以看一个简单的实例：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public class HelloCommand extends HystrixCommand<String> {\n\n    public HelloCommand(String name) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ThreadPoolTestGroup"))\n                .andCommandKey(HystrixCommandKey.Factory.asKey("testCommandKey"))\n                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(name))\n                .andCommandPropertiesDefaults(\n                        HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(20000))\n                .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter().withMaxQueueSize(5) // 配置队列大小\n                        .withCoreSize(2) // 配置线程池里的线程数\n        ));\n    }\n\n    @Override\n    protected String run() throws InterruptedException {\n        StringBuffer sb = new StringBuffer("Thread name=" + Thread.currentThread().getName() + ",");\n        Thread.sleep(2000);\n        return sb.append(System.currentTimeMillis()).toString();\n    }\n\n    @Override\n    protected String getFallback() {\n        return "Thread name=" + Thread.currentThread().getName() + ",fallback order";\n    }\n\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        List<Future<String>> list = new ArrayList<>();\n        System.out.println("Thread name=" + Thread.currentThread().getName());\n        for (int i = 0; i < 8; i++) {\n            Future<String> future = new HelloCommand("hystrix-order").queue();\n            list.add(future);\n        }\n        for (Future<String> future : list) {\n            System.out.println(future.get());\n        }\n        Thread.sleep(1000000);\n    }\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br")])]),a("p",[e._v("如上配置了处理此业务的线程数为2，并且指定当线程满了之后可以放入队列的最大数量，运行此程序结果如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Thread name=main\nThread name=hystrix-hystrix-order-1,1589776137342\nThread name=hystrix-hystrix-order-2,1589776137342\nThread name=hystrix-hystrix-order-1,1589776139343\nThread name=hystrix-hystrix-order-2,1589776139343\nThread name=hystrix-hystrix-order-1,1589776141343\nThread name=hystrix-hystrix-order-2,1589776141343\nThread name=hystrix-hystrix-order-2,1589776143343\nThread name=main,fallback order\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("主线程执行可以理解为就是io线程，业务执行使用的是hystrix线程，线程数2+队列5可以同时处理7条并发请求，超过的部分直接fallback；")]),e._v(" "),a("h2",{attrs:{id:"信号量隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量隔离"}},[e._v("#")]),e._v(" 信号量隔离")]),e._v(" "),a("p",[e._v("线程池隔离的好处是隔离度比较高，可以针对某个资源的线程池去进行处理而不影响其它资源，但是代价就是线程上下文切换的开销比较大，特别是对低延时的调用有比较大的影响；"),a("br"),e._v("\n上面对线程模型的介绍，我们发现Tomcat默认提供了200个io线程，Dubbo默认提供了200个业务线程，线程数已经很多了，如果每个命令在使用一个线程池，线程数会非常多，对系统的影响其实也很大；有一种更轻量的隔离方式就是"),a("strong",[e._v("信号量隔离")]),e._v("，仅限制对某个资源调用的并发数，而不是显式地去创建线程池，所以开销比较小；Hystrix和Sentinel都提供了信号量隔离方式，Hystrix已经停止更新，而Sentinel干脆就没有提供线程隔离，或者说线程隔离是没有必要的，完全可以用更轻量的信号量隔离代替；")]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("本文从线程模型开始，讲到了IO线程，以及为什么要分开IO线程和业务线程，具体如何去实现，最后简单介绍了一下更加轻量的信号量隔离，为什么说更加轻量哪，其实业务还是在IO线程处理，只不过会限制某个资源的并发数，没有多余的线程产生；当然也不是说线程隔离就没有价值了，其实还是要根据实际情况来定，根据你使用的容器，框架本身的线程模型来决定")])])}),[],!1,null,null,null);s.default=t.exports}}]);