(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{565:function(e,n,s){"use strict";s.r(n);var a=s(15),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("紧接着上文Dubbo分析之Transport层，本文继续介绍Exchange层，此层官方介绍为信息交换层：封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient, ExchangeServer；下面分别进行介绍")]),e._v(" "),s("h2",{attrs:{id:"exchanger分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchanger分析"}},[e._v("#")]),e._v(" Exchanger分析")]),e._v(" "),s("p",[e._v("Exchanger是此层的核心接口类，提供了connect()和bind()接口，分别返回ExchangeClient和ExchangeServer；dubbo提供了此接口的默认实现类HeaderExchanger，代码如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class HeaderExchanger implements Exchanger {\n \n    public static final String NAME = "header";\n \n    @Override\n    public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException {\n        return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))), true);\n    }\n \n    @Override\n    public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {\n        return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))));\n    }\n \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("在实现类中在connect和bind中分别实例化了HeaderExchangeClient和HeaderExchangeServer，传入的参数是Transporters，可以认为这里就是Transport层的入口类；这里的ExchangeClient/ExchangeServer其实就是对Client/Server的包装，同时传入了自己的ChannelHandler；ChannelHandler已经在Transport层介绍过了，提供了连接建立，连接端口，发送请求，接受请求等接口；已默认使用的Netty为例，这里就是对NettyClient和NettyServer的包装，同时传入DecodeHandler，在NettyHandler中被调用；")]),e._v(" "),s("h2",{attrs:{id:"exchangeclient分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchangeclient分析"}},[e._v("#")]),e._v(" ExchangeClient分析")]),e._v(" "),s("p",[e._v("ExchangeClient本身也继承于Client，同时也继承于ExchangeChannel：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public interface ExchangeClient extends Client, ExchangeChannel {\n \n}\n \npublic interface ExchangeChannel extends Channel {\n \n    ResponseFuture request(Object request) throws RemotingException;\n \n    ResponseFuture request(Object request, int timeout) throws RemotingException;\n \n    ExchangeHandler getExchangeHandler();\n \n    @Override\n    void close(int timeout);\n \n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v("ExchangeChannel负责将上层的data包装成Request，然后发送给Transport层；具体的逻辑在HeaderExchangeChannel中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public ResponseFuture request(Object request, int timeout) throws RemotingException {\n       if (closed) {\n           throw new RemotingException(this.getLocalAddress(), null, "Failed to send request " + request + ", cause: The channel " + this + " is closed!");\n       }\n       // create request.\n       Request req = new Request();\n       req.setVersion(Version.getProtocolVersion());\n       req.setTwoWay(true);\n       req.setData(request);\n       DefaultFuture future = new DefaultFuture(channel, req, timeout);\n       try {\n           channel.send(req);\n       } catch (RemotingException e) {\n           future.cancel();\n           throw e;\n       }\n       return future;\n   }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[e._v("创建了一个Request，在构造器中同时会产生一个RequestId；设置了协议版本，是否双向通信，最后设置了真实的业务数据；接下来实例化了一个DefaultFuture类，此类实现了同步转异步的方式，channel调用send发送请求之后，不需要等待结果，直接将DefaultFuture返回给上层，上层可以通过调用DefaultFuture的get方法来获取响应，get方法会阻塞等待获取服务器的响应才会返回；Client接收消息在handler里面，比如Netty在NettyHandler里面messageReceived方法介绍响应消息，NettyHandler最终会调用上面传入的DecodeHandler，DecodeHandler会先判断一下是否已经解码，如果解码就直接调用HeaderExchangeHandler，默认已经设置了编码解码器，所以会直接调用HeaderExchangeHandler里面的received方法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public void received(Channel channel, Object message) throws RemotingException {\n       channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());\n       ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);\n       try {\n           if (message instanceof Request) {\n               // handle request.\n               Request request = (Request) message;\n               if (request.isEvent()) {\n                   handlerEvent(channel, request);\n               } else {\n                   if (request.isTwoWay()) {\n                       Response response = handleRequest(exchangeChannel, request);\n                       channel.send(response);\n                   } else {\n                       handler.received(exchangeChannel, request.getData());\n                   }\n               }\n           } else if (message instanceof Response) {\n               handleResponse(channel, (Response) message);\n           } else if (message instanceof String) {\n               if (isClientSide(channel)) {\n                   Exception e = new Exception("Dubbo client can not supported string message: " + message + " in channel: " + channel + ", url: " + channel.getUrl());\n                   logger.error(e.getMessage(), e);\n               } else {\n                   String echo = handler.telnet(channel, (String) message);\n                   if (echo != null && echo.length() > 0) {\n                       channel.send(echo);\n                   }\n               }\n           } else {\n               handler.received(exchangeChannel, message);\n           }\n       } finally {\n           HeaderExchangeChannel.removeChannelIfDisconnected(channel);\n       }\n   }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br")])]),s("p",[e._v("服务端和客户端都会使用此方法，这里是客户端接受的是Response，直接调用handleResponse方法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("static void handleResponse(Channel channel, Response response) throws RemotingException {\n    if (response != null && !response.isHeartbeat()) {\n        DefaultFuture.received(channel, response);\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("接收到响应之后，再去告诉DefaultFuture已经收到响应，DefaultFuture本身存放了requestId对应DefaultFuture的一个ConcurrentHashMap；具体怎么映射过去，Response也包含一个responseId，此responseId和requestId是相同的；")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('private final Lock lock = new ReentrantLock();\nprivate final Condition done = lock.newCondition();\n   \npublic static void received(Channel channel, Response response) {\n      try {\n          DefaultFuture future = FUTURES.remove(response.getId());\n          if (future != null) {\n              future.doReceived(response);\n          } else {\n              logger.warn("The timeout response finally returned at "\n                      + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date()))\n                      + ", response " + response\n                      + (channel == null ? "" : ", channel: " + channel.getLocalAddress()\n                      + " -> " + channel.getRemoteAddress()));\n          }\n      } finally {\n          CHANNELS.remove(response.getId());\n      }\n  }\n   \n  private void doReceived(Response res) {\n      lock.lock();\n      try {\n          response = res;\n          if (done != null) {\n              done.signal();\n          }\n      } finally {\n          lock.unlock();\n      }\n      if (callback != null) {\n          invokeCallback(callback);\n      }\n  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br")])]),s("p",[e._v("通过responseId获取了之前请求时创建的DefaultFuture，然后再更新DefaultFuture内部的response对象，更新完之后在调用Condition的signal方法，用户唤起通过DefaultFuture的get方法获取响应的阻塞线程：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public Object get(int timeout) throws RemotingException {\n        if (timeout <= 0) {\n            timeout = Constants.DEFAULT_TIMEOUT;\n        }\n        if (!isDone()) {\n            long start = System.currentTimeMillis();\n            lock.lock();\n            try {\n                while (!isDone()) {\n                    done.await(timeout, TimeUnit.MILLISECONDS);\n                    if (isDone() || System.currentTimeMillis() - start > timeout) {\n                        break;\n                    }\n                }\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            } finally {\n                lock.unlock();\n            }\n            if (!isDone()) {\n                throw new TimeoutException(sent > 0, channel, getTimeoutMessage(false));\n            }\n        }\n        return returnFromResponse();\n    }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br")])]),s("p",[e._v("可以发现阻塞要么被获取被signal方法唤醒，要么等待超时；以上大致是客户端发送获取响应的流程，下面看看服务器端流程")]),e._v(" "),s("h2",{attrs:{id:"exchangeserver分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchangeserver分析"}},[e._v("#")]),e._v(" ExchangeServer分析")]),e._v(" "),s("p",[e._v("ExchangeServer继承于Server，同时提供了两个包装服务端Channel的方法")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public interface ExchangeServer extends Server {\n \n    Collection<ExchangeChannel> getExchangeChannels();\n \n    ExchangeChannel getExchangeChannel(InetSocketAddress remoteAddress);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("服务器端主要用于接收Request消息，然后处理消息，最后把响应发送给客户端，相关接收消息已经在上面介绍过了，同样是在HeaderExchangeHandler里面的received方法中，只不过这里的消息类型为Request；")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('Response handleRequest(ExchangeChannel channel, Request req) throws RemotingException {      Response res = new Response(req.getId(), req.getVersion());      if (req.isBroken()) {          Object data = req.getData();           String msg;          if (data == null) msg = null;          else if (data instanceof Throwable) msg = StringUtils.toString((Throwable) data);          else msg = data.toString();          res.setErrorMessage("Fail to decode request due to: " + msg);          res.setStatus(Response.BAD_REQUEST);           return res;      }      // find handler by message class.      Object msg = req.getData();      try {          // handle data.          Object result = handler.reply(channel, msg);          res.setStatus(Response.OK);          res.setResult(result);      } catch (Throwable e) {          res.setStatus(Response.SERVICE_ERROR);          res.setErrorMessage(StringUtils.toString(e));      }      return res;  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("首先创建了一个Response，并且指定responseId为requestId，方便在客户端定位到具体的DefaultFuture；然后调用handler的reply方法处理消息，返回结果，如何处理的将在后面的protocol层介绍，大致就是通过Request的信息，反射调用Server端的服务，然后返回结果，然后将结果放入Response对象中，通过channel将消息发送客户端；")]),e._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),s("p",[e._v("本文介绍了Exchange层的大体流程，围绕Exchanger，ExchangeClient和ExchangeServer展开；请求封装成Request，响应封装成Response，客户端通过异步的方式接收服务器请求；")])])}),[],!1,null,null,null);n.default=t.exports}}]);