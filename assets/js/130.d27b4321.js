(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{555:function(e,s,r){"use strict";r.r(s);var a=r(15),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),r("p",[e._v("前几篇文章分别从使用和源码层面对Quartz做了简单的分析，在分析的过程中也发现了Quartz不足的地方；比如底层调度依赖数据库的悲观锁，谁先抢到谁调度，这样会导致节点负载不均衡；还有调度和执行耦合在一起，导致调度器会受到业务的影响；下面看看如何来解决这几个问题；")]),e._v(" "),r("h2",{attrs:{id:"思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[e._v("#")]),e._v(" 思路")]),e._v(" "),r("p",[e._v("调度器和执行器拆成不同的进程，调度器还是依赖Quartz本身的调度方式，但是调度的并不是具体业务的QuartzJobBean，而是统一的一个RemoteQuartzJobBean，在此Bean中通过Netty远程调用执行器去执行具体业务Bean；具体的执行器在启动时注册到Zookeeper中，调度器可以在Zookeeper获取执行器信息，并通过相关的负载算法指定具体的执行器去执行，以下看简单的实现；")]),e._v(" "),r("h2",{attrs:{id:"执行器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行器"}},[e._v("#")]),e._v(" 执行器")]),e._v(" "),r("h3",{attrs:{id:"_1-执行器配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行器配置文件"}},[e._v("#")]),e._v(" 1.执行器配置文件")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("executor_name=firstExecutor\nservice_address=127.0.0.1:8000\nregistry_address=127.0.0.1:2181\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br")])]),r("p",[e._v("配置了执行器的名称，执行器启动的ip和端口以及Zookeeper的地址信息；")]),e._v(" "),r("h3",{attrs:{id:"_2-执行器服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行器服务"}},[e._v("#")]),e._v(" 2.执行器服务")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    <bean id="executorServer" class="com.zh.job.executor.ExecutorServer">\n        <constructor-arg name="executorName" value="${executor_name}"/>\n        <constructor-arg name="serviceAddress" value="${service_address}" />\n        <constructor-arg name="serviceRegistry" ref="serviceRegistry" />\n    </bean>\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br")])]),r("p",[e._v("ExecutorServer通过Netty启动服务，并向Zookeeper注册服务，部分代码如下：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('EventLoopGroup bossGroup = new NioEventLoopGroup();\nEventLoopGroup workerGroup = new NioEventLoopGroup();\ntry {\n    // 创建并初始化 Netty 服务端 Bootstrap 对象\n    ServerBootstrap bootstrap = new ServerBootstrap();\n    bootstrap.group(bossGroup, workerGroup);\n    bootstrap.channel(NioServerSocketChannel.class);\n    bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n        @Override\n        public void initChannel(SocketChannel channel) throws Exception {\n            ChannelPipeline pipeline = channel.pipeline();\n            pipeline.addLast(new RpcDecoder(Request.class));\n            pipeline.addLast(new RpcEncoder(Response.class));\n            pipeline.addLast(new ExecutorServerHandler(handlerMap));\n        }\n    });\n    bootstrap.option(ChannelOption.SO_BACKLOG, 1024);\n    bootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n    // 获取 RPC 服务器的 IP 地址与端口号\n    String[] addressArray = StringUtils.splitByWholeSeparator(serviceAddress, ":");\n    String ip = addressArray[0];\n    int port = Integer.parseInt(addressArray[1]);\n    // 启动 RPC 服务器\n    ChannelFuture future = bootstrap.bind(ip, port).sync();\n    // 注册 RPC 服务地址\n    if (serviceRegistry != null) {\n        serviceRegistry.register(executorName, serviceAddress);\n        LOGGER.info("register service: {} => {}", executorName, serviceAddress);\n    }\n    LOGGER.info("server started on port {}", port);\n    // 关闭 RPC 服务器\n    future.channel().closeFuture().sync();\n} finally {\n    workerGroup.shutdownGracefully();\n    bossGroup.shutdownGracefully();\n}\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br"),r("span",{staticClass:"line-number"},[e._v("18")]),r("br"),r("span",{staticClass:"line-number"},[e._v("19")]),r("br"),r("span",{staticClass:"line-number"},[e._v("20")]),r("br"),r("span",{staticClass:"line-number"},[e._v("21")]),r("br"),r("span",{staticClass:"line-number"},[e._v("22")]),r("br"),r("span",{staticClass:"line-number"},[e._v("23")]),r("br"),r("span",{staticClass:"line-number"},[e._v("24")]),r("br"),r("span",{staticClass:"line-number"},[e._v("25")]),r("br"),r("span",{staticClass:"line-number"},[e._v("26")]),r("br"),r("span",{staticClass:"line-number"},[e._v("27")]),r("br"),r("span",{staticClass:"line-number"},[e._v("28")]),r("br"),r("span",{staticClass:"line-number"},[e._v("29")]),r("br"),r("span",{staticClass:"line-number"},[e._v("30")]),r("br"),r("span",{staticClass:"line-number"},[e._v("31")]),r("br"),r("span",{staticClass:"line-number"},[e._v("32")]),r("br"),r("span",{staticClass:"line-number"},[e._v("33")]),r("br"),r("span",{staticClass:"line-number"},[e._v("34")]),r("br"),r("span",{staticClass:"line-number"},[e._v("35")]),r("br"),r("span",{staticClass:"line-number"},[e._v("36")]),r("br")])]),r("p",[e._v("在Netty中指定了编码器解码器，同时指定了ExecutorServerHandler用来处理调度器发送来的消息（更多代码查看项目源码）；最后向Zookeeper注册服务，路径格式如下：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("/job_registry/firstExecutor/address-0000000008\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[e._v("job_registry是固定值，firstExecutor是配置的具体执行器名称；")]),e._v(" "),r("h3",{attrs:{id:"_3-配置加载任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置加载任务"}},[e._v("#")]),e._v(" 3.配置加载任务")]),e._v(" "),r("p",[e._v("添加注解类，用来指定具体的业务Job：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Target({ ElementType.TYPE })\n@Retention(RetentionPolicy.RUNTIME)\n@Component\npublic @interface ExecutorTask {\n \n    String name();\n \n}\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br")])]),r("p",[e._v("例如具体的业务Task如下所示：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@ExecutorTask(name = "firstTask")\npublic class FirstTask implements IJobHandler {\n \n    private static final Logger LOGGER = LoggerFactory.getLogger(FirstTask.class);\n \n    @Override\n    public Result execute(String param) throws Exception {\n        LOGGER.info("execute firstTask");\n        return SUCCESS;\n    }\n \n}\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br")])]),r("p",[e._v("在启动执行器服务时，加载有ExecutorTask注解的任务类，此处定义的name要和调度端的名称相互匹配；")]),e._v(" "),r("h3",{attrs:{id:"_4-执行具体业务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-执行具体业务"}},[e._v("#")]),e._v(" 4.执行具体业务")]),e._v(" "),r("p",[e._v("Netty中指定了ExecutorServerHandler用来处理接受的调度器信息，通过反射的方式来调用具体的业务Job，部分代码如下：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('private Object handle(Request request) throws Exception {\n     // 获取服务对象\n     String serviceName = request.getInterfaceName();\n     Object serviceBean = handlerMap.get(serviceName);\n     if (serviceBean == null) {\n         throw new RuntimeException(String.format("can not find service bean by key: %s", serviceName));\n     }\n     // 获取反射调用所需的参数\n     Class<?> serviceClass = serviceBean.getClass();\n     String methodName = request.getMethodName();\n     Class<?>[] parameterTypes = request.getParameterTypes();\n     Object[] parameters = request.getParameters();\n     // 使用 CGLib 执行反射调用\n     FastClass serviceFastClass = FastClass.create(serviceClass);\n     FastMethod serviceFastMethod = serviceFastClass.getMethod(methodName, parameterTypes);\n     return serviceFastMethod.invoke(serviceBean, parameters);\n }\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br")])]),r("p",[e._v("serviceName对应的就是定义的”firstTask”，然后通过serviceName找到对应的Bean，然后反射调用，最终返回结果；")]),e._v(" "),r("h2",{attrs:{id:"调度器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调度器"}},[e._v("#")]),e._v(" 调度器")]),e._v(" "),r("p",[e._v("调度器还是依赖Quartz的原生调度方式，只不过调度器不在执行相关业务Task，所以相关配置也是类似，同样依赖数据库；")]),e._v(" "),r("h3",{attrs:{id:"_1-定义调度任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义调度任务"}},[e._v("#")]),e._v(" 1.定义调度任务")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<bean id="firstTask"\n     class="org.springframework.scheduling.quartz.JobDetailFactoryBean">\n     <property name="jobClass" value="com.zh.job.scheduler.RemoteQuartzJobBean" />\n     <property name="jobDataMap">\n         <map>\n             <entry key="executorBean" value-ref="firstExecutor" />\n         </map>\n     </property>\n </bean>\n \n <bean id="firstExecutor" class="com.zh.job.scheduler.ExecutorBean">\n     <constructor-arg name="executorName" value="firstExecutor"></constructor-arg>\n     <constructor-arg name="discoveryAddress" value="${discovery_address}"></constructor-arg>\n </bean>\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br")])]),r("p",[e._v("同样在调度端定义了名称问firstTask的任务，可以发现此类是RemoteQuartzJobBean，并不是具体的业务Task；同时也指定了jobDataMap，用来指定执行器名称和发现的Zookeeper地址；")]),e._v(" "),r("h3",{attrs:{id:"_2-remotequartzjobbean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-remotequartzjobbean"}},[e._v("#")]),e._v(" 2.RemoteQuartzJobBean")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('public class RemoteQuartzJobBean extends QuartzJobBean {     private static final Logger LOGGER = LoggerFactory.getLogger(RemoteQuartzJobBean.class);     private ExecutorBean executorBean;     @Override    protected void executeInternal(JobExecutionContext context) throws JobExecutionException {        JobKey jobKey = context.getTrigger().getJobKey();        LOGGER.info("jobName:" + jobKey.getName() + ",group:" + jobKey.getGroup());        IJobHandler executor = JobProxy.create(IJobHandler.class, jobKey, this.executorBean);        Result result;        try {            result = executor.execute("");            LOGGER.info("result:" + result);        } catch (Exception e) {            LOGGER.error("", e);        }    }     public ExecutorBean getExecutorBean() {        return executorBean;    }     public void setExecutorBean(ExecutorBean executorBean) {        this.executorBean = executorBean;    } }\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[e._v("此类同样继承于QuartzJobBean，这样Quartz才能调度Bean，在此Bean中通过jobKey和executorBean创建了IJobHandler的代理类，具体代码如下：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('public static <T> T create(final Class<?> interfaceClass, final JobKey jobKey, final ExecutorBean executor) {        // 创建动态代理对象        return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class<?>[] { interfaceClass },                new InvocationHandler() {                    @Override                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                        // 创建 RPC 请求对象并设置请求属性                        Request request = new Request();                        request.setRequestId(UUID.randomUUID().toString());                        request.setInterfaceName(jobKey.getName());                        request.setMethodName(method.getName());                        request.setParameterTypes(method.getParameterTypes());                        request.setParameters(args);                         String serviceAddress = null;                        ServiceDiscovery serviceDiscovery = ServiceDiscoveryFactory                                .getServiceDiscovery(executor.getDiscoveryAddress());                        // 获取 RPC 服务地址                        if (serviceDiscovery != null) {                            serviceAddress = serviceDiscovery.discover(executor.getExecutorName());                            LOGGER.debug("discover service: {} => {}", executor.getExecutorName(), serviceAddress);                        }                        if (StringUtil.isEmpty(serviceAddress)) {                            throw new RuntimeException("server address is empty");                        }                        // 从 RPC 服务地址中解析主机名与端口号                        String[] array = StringUtil.split(serviceAddress, ":");                        String host = array[0];                        int port = Integer.parseInt(array[1]);                        // 创建 RPC 客户端对象并发送 RPC 请求                        ExecutorClient client = new ExecutorClient(host, port);                        long time = System.currentTimeMillis();                        Response response = client.send(request);                        LOGGER.debug("time: {}ms", System.currentTimeMillis() - time);                        if (response == null) {                            throw new RuntimeException("response is null");                        }                        // 返回 RPC 响应结果                        if (response.hasException()) {                            throw response.getException();                        } else {                            return response.getResult();                        }                    }                });    }\n')])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[e._v("在Request中指定了InterfaceName为jobKey.getName()，也就是这里的firstTask；通过Zookeeper发现服务时指定了executor.getExecutorName()，这样可以在Zookeeper中找到具体的执行器地址，当然这里的地址可能是一个列表，可以通过负载均衡算法(随机，轮询，一致性hash等等)进行分配，获取到地址后通过Netty远程连接执行器，发送执行job等待返回结果；")]),e._v(" "),r("h2",{attrs:{id:"简单测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单测试"}},[e._v("#")]),e._v(" 简单测试")]),e._v(" "),r("p",[e._v("分别执行调度器和执行器，相关日志如下：")]),e._v(" "),r("h3",{attrs:{id:"_1-执行器日志"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行器日志"}},[e._v("#")]),e._v(" 1.执行器日志")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("2018-09-03 11:17:02 [main] 13::: DEBUG com.zh.job.sample.executor.ExecutorBootstrap - start server2018-09-03 11:17:03 [main] 31::: DEBUG com.zh.job.registry.impl.ZookeeperServiceRegistry - connect zookeeper2018-09-03 11:17:03 [main] 49::: DEBUG com.zh.job.registry.impl.ZookeeperServiceRegistry - create address node: /job_registry/firstExecutor/address-00000000092018-09-03 11:17:03 [main] 107::: INFO  com.zh.job.executor.ExecutorServer - register service: firstExecutor => 127.0.0.1:80002018-09-03 11:17:03 [main] 109::: INFO  com.zh.job.executor.ExecutorServer - server started on port 80002018-09-03 11:17:15 [nioEventLoopGroup-3-1] 17::: INFO  com.zh.job.sample.executor.task.FirstTask - execute firstTask\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("h3",{attrs:{id:"_2-调度器日志"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-调度器日志"}},[e._v("#")]),e._v(" 2.调度器日志")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("2018-09-03 11:17:14 [myScheduler_Worker-1] 28::: INFO  com.zh.job.scheduler.RemoteQuartzJobBean - jobName:firstTask,group:DEFAULT2018-09-03 11:17:15 [myScheduler_Worker-2] 28::: INFO  com.zh.job.scheduler.RemoteQuartzJobBean - jobName:firstTask,group:DEFAULT2018-09-03 11:17:15 [myScheduler_Worker-1] 33::: DEBUG com.zh.job.registry.impl.ZookeeperServiceDiscovery - connect zookeeper2018-09-03 11:17:15 [myScheduler_Worker-2] 54::: DEBUG com.zh.job.registry.impl.ZookeeperServiceDiscovery - get only address node: address-00000000092018-09-03 11:17:15 [myScheduler_Worker-1] 54::: DEBUG com.zh.job.registry.impl.ZookeeperServiceDiscovery - get only address node: address-00000000092018-09-03 11:17:15 [myScheduler_Worker-2] 42::: DEBUG com.zh.job.scheduler.JobProxy$1 - discover service: firstExecutor => 127.0.0.1:80002018-09-03 11:17:15 [myScheduler_Worker-1] 42::: DEBUG com.zh.job.scheduler.JobProxy$1 - discover service: firstExecutor => 127.0.0.1:80002018-09-03 11:17:15 [myScheduler_Worker-1] 55::: DEBUG com.zh.job.scheduler.JobProxy$1 - time: 369ms2018-09-03 11:17:15 [myScheduler_Worker-1] 33::: INFO  com.zh.job.scheduler.RemoteQuartzJobBean - result:com.zh.job.common.bean.Result@33b61489\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("本文通过一个实例来分析如何解决原生Quartz调度存在不足的问题，主要体现在调度器与执行器的隔离上，各司其责发挥各自的优势")])])}),[],!1,null,null,null);s.default=t.exports}}]);