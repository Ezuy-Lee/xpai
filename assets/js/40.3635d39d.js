(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{466:function(n,e,t){"use strict";t.r(e);var s=t(15),a=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[t("strong",[n._v("CAS介绍")]),t("br"),n._v("\n比较并交换(compare and swap, CAS)，是原子操作的一种，可用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题。")]),n._v(" "),t("p",[n._v("CAS操作基于CPU提供的原子操作指令实现，各个编译器根据这个特点实现了各自的原子操作函数。来源维基百科：")]),n._v(" "),t("p",[n._v("C语言：由GNU提供了对应的__sync系列函数完成原子操作。 "),t("br"),n._v("\nWindows：通过WindowsAPI实现了InterLocked Functions。"),t("br"),n._v("\nC++ 11：STL提供了atomic系列函数。"),t("br"),n._v("\nJAVA：sun.misc.Unsafe提供了compareAndSwap系列函数。"),t("br"),n._v("\nC#：通过Interlocked方法实现。"),t("br"),n._v('\nGo：通过import "sync/atomic"包实现。')]),n._v(" "),t("p",[n._v("java.util.concurrent包完全建立在CAS之上的，借助CAS实现了区别于synchronouse同步锁的一种乐观锁。"),t("br"),n._v("\n可以看一下AtomicInteger：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public final int getAndIncrement() {\n     for (;;) {\n         int current = get();\n         int next = current + 1;\n         if (compareAndSet(current, next))\n             return current;\n     }\n}\n\npublic final boolean compareAndSet(int expect, int update) {\n     return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br")])]),t("p",[n._v("其中牵扯到3个值：current，next以及当前内存中的最新值，当且仅当current和内存中的最新值相同时，才会改变内存值为next。")]),n._v(" "),t("p",[t("strong",[n._v("CAS的ABA问题")]),t("br"),n._v("\nABA问题描述："),t("br"),n._v("\n1.进程P1在共享变量中读到值为A"),t("br"),n._v("\n2.P1被抢占了，进程P2执行"),t("br"),n._v("\n3.P2把共享变量里的值从A改成了B，再改回到A，此时被P1抢占。"),t("br"),n._v("\n4.P1回来看到共享变量里的值没有被改变，于是继续执行。")]),n._v(" "),t("p",[n._v("虽然P1以为变量值没有改变，继续执行了，但是这个会引发一些潜在的问题。ABA问题最容易发生在lock free的算法中的，CAS首当其冲，因为CAS判断的是指针的地址。如果这个地址被重用了呢，问题就很大了。（地址被重用是很经常发生的，一个内存分配后释放了，再分配，很有可能还是原来的地址）。")]),n._v(" "),t("p",[t("strong",[n._v("ABA问题解决方案")]),t("br"),n._v("\n各种乐观锁的实现中通常都会用"),t("strong",[n._v("版本戳version")]),n._v("来对记录或对象标记，避免并发操作带来的问题，在Java中，"),t("strong",[n._v("AtomicStampedReference")]),n._v("也实现了这个作用，它通过包装类**Pair[E,Integer]**的元组来对对象标记版本戳stamp，从而避免ABA问题。")]),n._v(" "),t("p",[n._v("下面看一下AtomicInteger和AtomicStampedReference分别执行CAS操作：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicStampedReference;\n\npublic class ABASingle {\n\n    public static void main(String[] args) {\n        AtomicInteger atomicInt = new AtomicInteger(100);\n        atomicInt.compareAndSet(100, 101);\n        atomicInt.compareAndSet(101, 100);\n        System.out.println("new value = " + atomicInt.get());\n        boolean result1 = atomicInt.compareAndSet(100, 101);\n        System.out.println(result1); // result:true\n\n        AtomicInteger v1 = new AtomicInteger(100);\n        AtomicInteger v2 = new AtomicInteger(101);\n        AtomicStampedReference<AtomicInteger> stampedRef = new AtomicStampedReference<AtomicInteger>(\n                v1, 0);\n\n        int stamp = stampedRef.getStamp();\n        stampedRef.compareAndSet(v1, v2, stampedRef.getStamp(),\n                stampedRef.getStamp() + 1);\n        stampedRef.compareAndSet(v2, v1, stampedRef.getStamp(),\n                stampedRef.getStamp() + 1);\n        System.out.println("new value = " + stampedRef.getReference());\n        boolean result2 = stampedRef.compareAndSet(v1, v2, stamp, stamp + 1);\n        System.out.println(result2); // result:false\n    }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br")])]),t("p",[n._v("AtomicInteger 执行cas操作成功，AtomicStampedReference执行cas操作失败。")]),n._v(" "),t("p",[n._v("这样是不是就是说AtomicInteger存在ABA问题，根本就不能用了；肯定是可以用的，AtomicInteger处理的一个数值，所有就算出现ABA问题问题，也不会有什么影响；但是如果这里是一个地址**（地址被重用是很经常发生的，一个内存分配后释放了，再分配，很有可能还是原来的地址）**，比较地址发现没有问题，但其实这个对象早就变了，这时候就可以使用AtomicStampedReference来解决ABA问题。")])])}),[],!1,null,null,null);e.default=a.exports}}]);