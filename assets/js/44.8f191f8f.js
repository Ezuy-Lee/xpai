(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{470:function(e,n,a){"use strict";a.r(n);var s=a(15),t=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[e._v("从字面意思理解就是数据不需要来回的拷贝，大大提升了系统的性能；这个词我们也经常在java nio，netty，kafka，RocketMQ等框架中听到，经常作为其提升性能的一大亮点；下面从I/O的几个概念开始，进而在分析零拷贝。")]),e._v(" "),a("h2",{attrs:{id:"i-o概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o概念"}},[e._v("#")]),e._v(" I/O概念")]),e._v(" "),a("h3",{attrs:{id:"_1-缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓冲区"}},[e._v("#")]),e._v(" 1.缓冲区")]),e._v(" "),a("p",[e._v("缓冲区是所有I/O的基础，I/O讲的无非就是把数据移进或移出缓冲区；进程执行I/O操作，就是向操作系统发出请求，让它要么把缓冲区的数据排干(写)，要么填充缓冲区(读)；下面看一个java进程发起read请求加载数据大致的流程图："),a("br"),e._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/770870395a9464b5f19be8550637719842c.jpg",alt:""}}),a("br"),e._v("\n进程发起read请求之后，内核接收到read请求之后，会先检查内核空间中是否已经存在进程所需要的数据，如果已经存在，则直接把数据copy给进程的缓冲区；如果没有内核随即向磁盘控制器发出命令，要求从磁盘读取数据，磁盘控制器把数据直接写入内核read缓冲区，这一步通过DMA完成；接下来就是内核将数据copy到进程的缓冲区；"),a("br"),e._v("\n如果进程发起write请求，同样需要把用户缓冲区里面的数据copy到内核的socket缓冲区里面，然后再通过DMA把数据copy到网卡中，发送出去；"),a("br"),e._v("\n你可能觉得这样挺浪费空间的，每次都需要把内核空间的数据拷贝到用户空间中，所以零拷贝的出现就是为了解决这种问题的；"),a("br"),e._v("\n关于零拷贝提供了两种方式分别是：mmap+write方式，sendfile方式；")]),e._v(" "),a("h3",{attrs:{id:"_2-虚拟内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟内存"}},[e._v("#")]),e._v(" 2.虚拟内存")]),e._v(" "),a("p",[e._v("所有现代操作系统都使用虚拟内存，使用虚拟的地址取代物理地址，这样做的好处是："),a("br"),e._v("\n1.一个以上的虚拟地址可以指向同一个物理内存地址，"),a("br"),e._v("\n2.虚拟内存空间可大于实际可用的物理地址；"),a("br"),e._v("\n利用第一条特性可以把内核空间地址和用户空间的虚拟地址映射到同一个物理地址，这样DMA就可以填充对内核和用户空间进程同时可见的缓冲区了，大致如下图所示："),a("br"),e._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/b97a87c262f9a42c6d7689e90d35d145c9a.jpg",alt:""}}),a("br"),e._v("\n省去了内核与用户空间的往来拷贝，java也利用操作系统的此特性来提升性能，下面重点看看java对零拷贝都有哪些支持。")]),e._v(" "),a("h3",{attrs:{id:"_3-mmap-write方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-mmap-write方式"}},[e._v("#")]),e._v(" 3.mmap+write方式")]),e._v(" "),a("p",[e._v("使用mmap+write方式代替原来的read+write方式，mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系；这样就可以省掉原来内核read缓冲区copy数据到用户缓冲区，但是还是需要内核read缓冲区将数据copy到内核socket缓冲区，大致如下图所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/5bbe70afae61ab668cbd19b78b19b8c8800.jpg",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"_4-sendfile方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-sendfile方式"}},[e._v("#")]),e._v(" 4.sendfile方式")]),e._v(" "),a("p",[e._v("sendfile系统调用在内核版本2.1中被引入，目的是简化通过网络在两个通道之间进行的数据传输过程。sendfile系统调用的引入，不仅减少了数据复制，还减少了上下文切换的次数，大致如下图所示："),a("br"),e._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/ebab67b3eed545979b919d93892d21e75db.jpg",alt:""}}),a("br"),e._v("\n数据传送只发生在内核空间，所以减少了一次上下文切换；但是还是存在一次copy，能不能把这一次copy也省略掉，Linux2.4内核中做了改进，将Kernel buffer中对应的数据描述信息（内存地址，偏移量）记录到相应的socket缓冲区当中，这样连内核空间中的一次cpu copy也省掉了；")]),e._v(" "),a("h2",{attrs:{id:"java零拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java零拷贝"}},[e._v("#")]),e._v(" Java零拷贝")]),e._v(" "),a("h3",{attrs:{id:"_1-mappedbytebuffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-mappedbytebuffer"}},[e._v("#")]),e._v(" 1.MappedByteBuffer")]),e._v(" "),a("p",[e._v("java nio提供的FileChannel提供了map()方法，该方法可以在一个打开的文件和MappedByteBuffer之间建立一个虚拟内存映射，MappedByteBuffer继承于ByteBuffer，类似于一个基于内存的缓冲区，只不过该对象的数据元素存储在磁盘的一个文件中；调用get()方法会从磁盘中获取数据，此数据反映该文件当前的内容，调用put()方法会更新磁盘上的文件，并且对文件做的修改对其他阅读者也是可见的；下面看一个简单的读取实例，然后在对MappedByteBuffer进行分析：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public class MappedByteBufferTest {\n\n    public static void main(String[] args) throws Exception {\n        File file = new File("D://db.txt");\n        long len = file.length();\n        byte[] ds = new byte[(int) len];\n        MappedByteBuffer mappedByteBuffer = new FileInputStream(file).getChannel().map(FileChannel.MapMode.READ_ONLY, 0,\n                len);\n        for (int offset = 0; offset < len; offset++) {\n            byte b = mappedByteBuffer.get();\n            ds[offset] = b;\n        }\n        Scanner scan = new Scanner(new ByteArrayInputStream(ds)).useDelimiter(" ");\n        while (scan.hasNext()) {\n            System.out.print(scan.next() + " ");\n        }\n    }\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("p",[e._v("主要通过FileChannel提供的map()来实现映射，map()方法如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    public abstract MappedByteBuffer map(MapMode mode,\n                                         long position, long size)\n        throws IOException;\n        \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("分别提供了三个参数，MapMode，Position和size；分别表示："),a("br"),e._v("\nMapMode：映射的模式，可选项包括：READ_ONLY，READ_WRITE，PRIVATE；"),a("br"),e._v("\nPosition：从哪个位置开始映射，字节数的位置；"),a("br"),e._v("\nSize：从position开始向后多少个字节；")]),e._v(" "),a("p",[e._v("重点看一下MapMode，请两个分别表示只读和可读可写，当然请求的映射模式受到Filechannel对象的访问权限限制，如果在一个没有读权限的文件上启用READ_ONLY，将抛出NonReadableChannelException；PRIVATE模式表示写时拷贝的映射，意味着通过put()方法所做的任何修改都会导致产生一个私有的数据拷贝并且该拷贝中的数据只有MappedByteBuffer实例可以看到；该过程不会对底层文件做任何修改，而且一旦缓冲区被施以垃圾收集动作（garbage collected），那些修改都会丢失；大致浏览一下map()方法的源码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    public MappedByteBuffer map(MapMode mode, long position, long size)\n        throws IOException\n    {\n            ...省略...\n            int pagePosition = (int)(position % allocationGranularity);\n            long mapPosition = position - pagePosition;\n            long mapSize = size + pagePosition;\n            try {\n                // If no exception was thrown from map0, the address is valid\n                addr = map0(imode, mapPosition, mapSize);\n            } catch (OutOfMemoryError x) {\n                // An OutOfMemoryError may indicate that we\'ve exhausted memory\n                // so force gc and re-attempt map\n                System.gc();\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException y) {\n                    Thread.currentThread().interrupt();\n                }\n                try {\n                    addr = map0(imode, mapPosition, mapSize);\n                } catch (OutOfMemoryError y) {\n                    // After a second OOME, fail\n                    throw new IOException("Map failed", y);\n                }\n            }\n\n            // On Windows, and potentially other platforms, we need an open\n            // file descriptor for some mapping operations.\n            FileDescriptor mfd;\n            try {\n                mfd = nd.duplicateForMapping(fd);\n            } catch (IOException ioe) {\n                unmap0(addr, mapSize);\n                throw ioe;\n            }\n\n            assert (IOStatus.checkAll(addr));\n            assert (addr % allocationGranularity == 0);\n            int isize = (int)size;\n            Unmapper um = new Unmapper(addr, mapSize, isize, mfd);\n            if ((!writable) || (imode == MAP_RO)) {\n                return Util.newMappedByteBufferR(isize,\n                                                 addr + pagePosition,\n                                                 mfd,\n                                                 um);\n            } else {\n                return Util.newMappedByteBuffer(isize,\n                                                addr + pagePosition,\n                                                mfd,\n                                                um);\n            }\n     }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br"),a("span",{staticClass:"line-number"},[e._v("47")]),a("br"),a("span",{staticClass:"line-number"},[e._v("48")]),a("br"),a("span",{staticClass:"line-number"},[e._v("49")]),a("br"),a("span",{staticClass:"line-number"},[e._v("50")]),a("br"),a("span",{staticClass:"line-number"},[e._v("51")]),a("br"),a("span",{staticClass:"line-number"},[e._v("52")]),a("br"),a("span",{staticClass:"line-number"},[e._v("53")]),a("br")])]),a("p",[e._v("大致意思就是通过native方法获取内存映射的地址，如果失败，手动gc再次映射；最后通过内存映射的地址实例化出MappedByteBuffer，MappedByteBuffer本身是一个抽象类，其实这里真正实例话出来的是DirectByteBuffer；")]),e._v(" "),a("h3",{attrs:{id:"_2-directbytebuffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-directbytebuffer"}},[e._v("#")]),e._v(" 2.DirectByteBuffer")]),e._v(" "),a("p",[e._v("DirectByteBuffer继承于MappedByteBuffer，从名字就可以猜测出开辟了一段直接的内存，并不会占用jvm的内存空间；上一节中通过Filechannel映射出的MappedByteBuffer其实际也是DirectByteBuffer，当然除了这种方式，也可以手动开辟一段空间：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ByteBuffer directByteBuffer = ByteBuffer.allocateDirect(100);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("如上开辟了100字节的直接内存空间；")]),e._v(" "),a("h3",{attrs:{id:"_3-channel-to-channel传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-channel-to-channel传输"}},[e._v("#")]),e._v(" 3.Channel-to-Channel传输")]),e._v(" "),a("p",[e._v("经常需要从一个位置将文件传输到另外一个位置，FileChannel提供了transferTo()方法用来提高传输的效率，首先看一个简单的实例：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public class ChannelTransfer {\n    public static void main(String[] argv) throws Exception {\n        String files[]=new String[1];\n        files[0]="D://db.txt";\n        catFiles(Channels.newChannel(System.out), files);\n    }\n\n    private static void catFiles(WritableByteChannel target, String[] files)\n            throws Exception {\n        for (int i = 0; i < files.length; i++) {\n            FileInputStream fis = new FileInputStream(files[i]);\n            FileChannel channel = fis.getChannel();\n            channel.transferTo(0, channel.size(), target);\n            channel.close();\n            fis.close();\n        }\n    }\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("p",[e._v("通过FileChannel的transferTo()方法将文件数据传输到System.out通道，接口定义如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    public abstract long transferTo(long position, long count,\n                                    WritableByteChannel target)\n        throws IOException;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("几个参数也比较好理解，分别是开始传输的位置，传输的字节数，以及目标通道；transferTo()允许将一个通道交叉连接到另一个通道，而不需要一个中间缓冲区来传递数据；"),a("br"),e._v("\n注：这里不需要中间缓冲区有两层意思：第一层不需要用户空间缓冲区来拷贝内核缓冲区，另外一层两个通道都有自己的内核缓冲区，两个内核缓冲区也可以做到无需拷贝数据；")]),e._v(" "),a("h2",{attrs:{id:"netty零拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netty零拷贝"}},[e._v("#")]),e._v(" Netty零拷贝")]),e._v(" "),a("p",[e._v("netty提供了零拷贝的buffer，在传输数据时，最终处理的数据会需要对单个传输的报文，进行组合和拆分，Nio原生的ByteBuffer无法做到，netty通过提供的Composite(组合)和Slice(拆分)两种buffer来实现零拷贝；看下面一张图会比较清晰："),a("br"),e._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/dbd8280a57fdfe44dce7e2aa470ebb4e629.jpg",alt:""}}),a("br"),e._v("\nTCP层HTTP报文被分成了两个ChannelBuffer，这两个Buffer对我们上层的逻辑(HTTP处理)是没有意义的。 但是两个ChannelBuffer被组合起来，就成为了一个有意义的HTTP报文，这个报文对应的ChannelBuffer，才是能称之为”Message”的东西，这里用到了一个词”Virtual Buffer”。"),a("br"),e._v("\n可以看一下netty提供的CompositeChannelBuffer源码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class CompositeChannelBuffer extends AbstractChannelBuffer {\n\n    private final ByteOrder order;\n    private ChannelBuffer[] components;\n    private int[] indices;\n    private int lastAccessedComponentId;\n    private final boolean gathering;\n    \n    public byte getByte(int index) {\n        int componentId = componentId(index);\n        return components[componentId].getByte(index - indices[componentId]);\n    }\n    ...省略...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("components用来保存的就是所有接收到的buffer，indices记录每个buffer的起始位置，lastAccessedComponentId记录上一次访问的ComponentId；CompositeChannelBuffer并不会开辟新的内存并直接复制所有ChannelBuffer内容，而是直接保存了所有ChannelBuffer的引用，并在子ChannelBuffer里进行读写，实现了零拷贝。")]),e._v(" "),a("h2",{attrs:{id:"其他零拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他零拷贝"}},[e._v("#")]),e._v(" 其他零拷贝")]),e._v(" "),a("p",[e._v("RocketMQ的消息采用顺序写到commitlog文件，然后利用consume queue文件作为索引；RocketMQ采用零拷贝mmap+write的方式来回应Consumer的请求；"),a("br"),e._v("\n同样kafka中存在大量的网络数据持久化到磁盘和磁盘文件通过网络发送的过程，kafka使用了sendfile零拷贝方式；")]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("零拷贝如果简单用java里面对象的概率来理解的话，其实就是使用的都是对象的引用，每个引用对象的地方对其改变就都能改变此对象，永远只存在一份对象。")])])}),[],!1,null,null,null);n.default=t.exports}}]);