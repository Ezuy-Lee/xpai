(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{564:function(n,s,e){"use strict";e.r(s);var r=e(15),a=Object(r.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("紧接上文Dubbo分析之Protocol层，本文继续分析dubbo的cluster层，此层封装多个提供者的路由及负载均衡，并桥接注册中心，以Invoker为中心，扩展接口为Cluster, Directory, Router, LoadBalance；")]),n._v(" "),e("h2",{attrs:{id:"cluster接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cluster接口"}},[n._v("#")]),n._v(" Cluster接口")]),n._v(" "),e("p",[n._v("整个cluster层可以使用如下图片概括："),e("br"),n._v(" "),e("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/0e1d2a885fcf5ecf173fbcb18740d12046d.jpg",alt:""}})]),n._v(" "),e("p",[n._v("各节点关系："),e("br"),n._v("\n这里的Invoker是Provider的一个可调用Service的抽象，Invoker封装了Provider地址及Service接口信息；"),e("br"),n._v("\nDirectory代表多个Invoker，可以把它看成List ，但与List不同的是，它的值可能是动态变化的，比如注册中心推送变更；"),e("br"),n._v("\nCluster将Directory中的多个Invoker伪装成一个 Invoker，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个；"),e("br"),n._v("\nRouter负责从多个Invoker中按路由规则选出子集，比如读写分离，应用隔离等；"),e("br"),n._v("\nLoadBalance负责从多个Invoker中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选；")]),n._v(" "),e("p",[n._v("Cluster经过目录，路由，负载均衡获取到一个可用的Invoker，交给上层调用，接口如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@SPI(FailoverCluster.NAME)\npublic interface Cluster {\n \n    /**\n     * Merge the directory invokers to a virtual invoker.\n     *\n     * @param <T>\n     * @param directory\n     * @return cluster invoker\n     * @throws RpcException\n     */\n    @Adaptive\n    <T> Invoker<T> join(Directory<T> directory) throws RpcException;\n \n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("Cluster是一个集群容错接口，经过路由，负载均衡之后获取的Invoker，由容错机制来处理，dubbo提供了多种容错机制包括："),e("br"),n._v("\n**Failover Cluster：**失败自动切换，当出现失败，重试其它服务器 [1]。通常用于读操作，但重试会带来更长延迟。可通过 retries=”2″ 来设置重试次数(不含第一次)。"),e("br"),n._v("\n**Failfast Cluster：**快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。"),e("br"),n._v("\n**Failsafe Cluster：**失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。"),e("br"),n._v("\n**Failback Cluster：**失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。"),e("br"),n._v("\n**Forking Cluster：**并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=”2″ 来设置最大并行数。"),e("br"),n._v("\n**Broadcast Cluster：**广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。")]),n._v(" "),e("p",[n._v("默认使用了FailoverCluster，失败的时候会默认重试其他服务器，默认为两次；当然也可以扩展其他的容错机制；看一下默认的FailoverCluster容错机制，具体源码在FailoverClusterInvoker中：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n       List<Invoker<T>> copyinvokers = invokers;\n       checkInvokers(copyinvokers, invocation);\n       int len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + 1;\n       if (len <= 0) {\n           len = 1;\n       }\n       // retry loop.\n       RpcException le = null; // last exception.\n       List<Invoker<T>> invoked = new ArrayList<Invoker<T>>(copyinvokers.size()); // invoked invokers.\n       Set<String> providers = new HashSet<String>(len);\n       for (int i = 0; i < len; i++) {\n           //Reselect before retry to avoid a change of candidate `invokers`.\n           //NOTE: if `invokers` changed, then `invoked` also lose accuracy.\n           if (i > 0) {\n               checkWhetherDestroyed();\n               copyinvokers = list(invocation);\n               // check again\n               checkInvokers(copyinvokers, invocation);\n           }\n           Invoker<T> invoker = select(loadbalance, invocation, copyinvokers, invoked);\n           invoked.add(invoker);\n           RpcContext.getContext().setInvokers((List) invoked);\n           try {\n               Result result = invoker.invoke(invocation);\n               if (le != null && logger.isWarnEnabled()) {\n                   logger.warn("Although retry the method " + invocation.getMethodName()\n                           + " in the service " + getInterface().getName()\n                           + " was successful by the provider " + invoker.getUrl().getAddress()\n                           + ", but there have been failed providers " + providers\n                           + " (" + providers.size() + "/" + copyinvokers.size()\n                           + ") from the registry " + directory.getUrl().getAddress()\n                           + " on the consumer " + NetUtils.getLocalHost()\n                           + " using the dubbo version " + Version.getVersion() + ". Last error is: "\n                           + le.getMessage(), le);\n               }\n               return result;\n           } catch (RpcException e) {\n               if (e.isBiz()) { // biz exception.\n                   throw e;\n               }\n               le = e;\n           } catch (Throwable e) {\n               le = new RpcException(e.getMessage(), e);\n           } finally {\n               providers.add(invoker.getUrl().getAddress());\n           }\n       }\n       throw new RpcException(le != null ? le.getCode() : 0, "Failed to invoke the method "\n               + invocation.getMethodName() + " in the service " + getInterface().getName()\n               + ". Tried " + len + " times of the providers " + providers\n               + " (" + providers.size() + "/" + copyinvokers.size()\n               + ") from the registry " + directory.getUrl().getAddress()\n               + " on the consumer " + NetUtils.getLocalHost() + " using the dubbo version "\n               + Version.getVersion() + ". Last error is: "\n               + (le != null ? le.getMessage() : ""), le != null && le.getCause() != null ? le.getCause() : le);\n   }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br")])]),e("p",[n._v("invocation是客户端传给服务器的相关参数包括(方法名称，方法参数，参数值，附件信息)，invokers是经过路由之后的服务器列表，loadbalance是指定的负载均衡策略；首先检查invokers是否为空，为空直接抛异常，然后获取重试的次数默认为2次，接下来就是循环调用指定次数，如果不是第一次调用(表示第一次调用失败)，会重新加载服务器列表，然后通过负载均衡策略获取唯一的Invoker，最后就是通过Invoker把invocation发送给服务器，返回结果Result；")]),n._v(" "),e("p",[n._v("具体的doInvoke方法是在抽象类AbstractClusterInvoker中被调用的：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public Result invoke(final Invocation invocation) throws RpcException {\n       checkWhetherDestroyed();\n       LoadBalance loadbalance = null;\n       List<Invoker<T>> invokers = list(invocation);\n       if (invokers != null && !invokers.isEmpty()) {\n           loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()\n                   .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));\n       }\n       RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);\n       return doInvoke(invocation, invokers, loadbalance);\n   }\n    \n    protected List<Invoker<T>> list(Invocation invocation) throws RpcException {\n       List<Invoker<T>> invokers = directory.list(invocation);\n       return invokers;\n   }\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("首先通过Directory获取Invoker列表，同时在Directory中也会做路由处理，然后获取负载均衡策略，最后调用具体的容错策略；下面具体看一下Directory；")]),n._v(" "),e("h2",{attrs:{id:"directory接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#directory接口"}},[n._v("#")]),n._v(" Directory接口")]),n._v(" "),e("p",[n._v("接口定义如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface Directory<T> extends Node {\n \n    /**\n     * get service type.\n     *\n     * @return service type.\n     */\n    Class<T> getInterface();\n \n    /**\n     * list invokers.\n     *\n     * @return invokers\n     */\n    List<Invoker<T>> list(Invocation invocation) throws RpcException;\n \n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("p",[n._v("目录服务作用就是获取指定接口的服务列表，具体实现有两个：StaticDirectory和RegistryDirectory，同时都继承于AbstractDirectory；从名字可以大致知道StaticDirectory是一个固定的目录服务，表示里面的Invoker列表不会动态改变；RegistryDirectory是一个动态的目录服务，通过注册中心动态更新服务列表；list实现在抽象类中：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public List<Invoker<T>> list(Invocation invocation) throws RpcException {\n       if (destroyed) {\n           throw new RpcException("Directory already destroyed .url: " + getUrl());\n       }\n       List<Invoker<T>> invokers = doList(invocation);\n       List<Router> localRouters = this.routers; // local reference\n       if (localRouters != null && !localRouters.isEmpty()) {\n           for (Router router : localRouters) {\n               try {\n                   if (router.getUrl() == null || router.getUrl().getParameter(Constants.RUNTIME_KEY, false)) {\n                       invokers = router.route(invokers, getConsumerUrl(), invocation);\n                   }\n               } catch (Throwable t) {\n                   logger.error("Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(), t);\n               }\n           }\n       }\n       return invokers;\n   }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("p",[n._v("首先检查目录是否被销毁，然后调用doList，具体在实现类中定义，最后调用路由功能，下面重点看一下StaticDirectory和RegistryDirectory中的doList方法")]),n._v(" "),e("h3",{attrs:{id:"_1-registrydirectory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-registrydirectory"}},[n._v("#")]),n._v(" 1.RegistryDirectory")]),n._v(" "),e("p",[n._v("是一个动态的目录服务，所有可以看到RegistryDirectory同时也继承了NotifyListener接口，是一个通知接口，注册中心有服务列表更新的时候，同时通知RegistryDirectory，通知逻辑如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public synchronized void notify(List<URL> urls) {\n        List<URL> invokerUrls = new ArrayList<URL>();\n        List<URL> routerUrls = new ArrayList<URL>();\n        List<URL> configuratorUrls = new ArrayList<URL>();\n        for (URL url : urls) {\n            String protocol = url.getProtocol();\n            String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);\n            if (Constants.ROUTERS_CATEGORY.equals(category)\n                    || Constants.ROUTE_PROTOCOL.equals(protocol)) {\n                routerUrls.add(url);\n            } else if (Constants.CONFIGURATORS_CATEGORY.equals(category)\n                    || Constants.OVERRIDE_PROTOCOL.equals(protocol)) {\n                configuratorUrls.add(url);\n            } else if (Constants.PROVIDERS_CATEGORY.equals(category)) {\n                invokerUrls.add(url);\n            } else {\n                logger.warn("Unsupported category " + category + " in notified url: " + url + " from registry " + getUrl().getAddress() + " to consumer " + NetUtils.getLocalHost());\n            }\n        }\n        // configurators\n        if (configuratorUrls != null && !configuratorUrls.isEmpty()) {\n            this.configurators = toConfigurators(configuratorUrls);\n        }\n        // routers\n        if (routerUrls != null && !routerUrls.isEmpty()) {\n            List<Router> routers = toRouters(routerUrls);\n            if (routers != null) { // null - do nothing\n                setRouters(routers);\n            }\n        }\n        List<Configurator> localConfigurators = this.configurators; // local reference\n        // merge override parameters\n        this.overrideDirectoryUrl = directoryUrl;\n        if (localConfigurators != null && !localConfigurators.isEmpty()) {\n            for (Configurator configurator : localConfigurators) {\n                this.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);\n            }\n        }\n        // providers\n        refreshInvoker(invokerUrls);\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br")])]),e("p",[n._v("此通知接口会接受三种类别的url包括：router(路由)，configurator(配置)，provider(服务提供方)；"),e("br"),n._v("\n路由规则：决定一次dubbo服务调用的目标服务器，分为条件路由规则和脚本路由规则，并且支持可扩展，向注册中心写入路由规则的操作通常由监控中心或治理中心的页面完成；"),e("br"),n._v("\n配置规则：向注册中心写入动态配置覆盖规则 [1]。该功能通常由监控中心或治理中心的页面完成；"),e("br"),n._v("\nprovider：动态提供的服务列表"),e("br"),n._v("\n路由规则和配置规则其实就是对provider服务列表更新和过滤处理，refreshInvoker方法就是根据三种url类别刷新本地的invoker列表，下面看一下RegistryDirectory实现的doList接口：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public List<Invoker<T>> doList(Invocation invocation) {\n        if (forbidden) {\n            // 1. No service provider 2. Service providers are disabled\n            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION,\n                "No provider available from registry " + getUrl().getAddress() + " for service " + getConsumerUrl().getServiceKey() + " on consumer " +  NetUtils.getLocalHost()\n                        + " use dubbo version " + Version.getVersion() + ", please check status of providers(disabled, not registered or in blacklist).");\n        }\n        List<Invoker<T>> invokers = null;\n        Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap; // local reference\n        if (localMethodInvokerMap != null && localMethodInvokerMap.size() > 0) {\n            String methodName = RpcUtils.getMethodName(invocation);\n            Object[] args = RpcUtils.getArguments(invocation);\n            if (args != null && args.length > 0 && args[0] != null\n                    && (args[0] instanceof String || args[0].getClass().isEnum())) {\n                invokers = localMethodInvokerMap.get(methodName + "." + args[0]); // The routing can be enumerated according to the first parameter\n            }\n            if (invokers == null) {\n                invokers = localMethodInvokerMap.get(methodName);\n            }\n            if (invokers == null) {\n                invokers = localMethodInvokerMap.get(Constants.ANY_VALUE);\n            }\n            if (invokers == null) {\n                Iterator<List<Invoker<T>>> iterator = localMethodInvokerMap.values().iterator();\n                if (iterator.hasNext()) {\n                    invokers = iterator.next();\n                }\n            }\n        }\n        return invokers == null ? new ArrayList<Invoker<T>>(0) : invokers;\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br")])]),e("p",[n._v("refreshInvoker处理之后，服务列表已methodInvokerMap存在，一个方法对应服务列表Map>>；"),e("br"),n._v("\n通过Invocation中指定的方法获取对应的服务列表，如果具体的方法没有对应的服务列表，则获取”*”对应的服务列表；处理完之后就在父类中进行路由处理，路由规则同样是通过通知接口获取的，路由规则在下章介绍；")]),n._v(" "),e("h3",{attrs:{id:"_2-staticdirectory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-staticdirectory"}},[n._v("#")]),n._v(" 2.StaticDirectory")]),n._v(" "),e("p",[n._v("这是一个静态的目录服务，里面的服务列表在初始化的时候就已经存在，并且不会改变；StaticDirectory用得比较少,主要用在服务对多注册中心的引用；")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected List<Invoker<T>> doList(Invocation invocation) throws RpcException {\n \n    return invokers;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("因为是静态的，所有doList方法也很简单，直接返回内存中的服务列表即可；")]),n._v(" "),e("h2",{attrs:{id:"router接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#router接口"}},[n._v("#")]),n._v(" Router接口")]),n._v(" "),e("p",[n._v("路由规则决定一次dubbo服务调用的目标服务器，分为条件路由规则和脚本路由规则，并且支持可扩展，接口如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface Router extends Comparable<Router> {\n \n    /**\n     * get the router url.\n     *\n     * @return url\n     */\n    URL getUrl();\n \n    /**\n     * route.\n     *\n     * @param invokers\n     * @param url        refer url\n     * @param invocation\n     * @return routed invokers\n     * @throws RpcException\n     */\n    <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n \n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])]),e("p",[n._v("接口中提供的route方法通过一定的规则过滤出invokers的一个子集；提供了三个实现类：ScriptRouter，ConditionRouter和MockInvokersSelector"),e("br"),n._v("\nScriptRouter：脚本路由规则支持 JDK 脚本引擎的所有脚本，比如：javascript, jruby, groovy 等，通过type=javascript参数设置脚本类型，缺省为javascript；"),e("br"),n._v("\nConditionRouter：基于条件表达式的路由规则，如：host = 10.20.153.10 => host = 10.20.153.11；=> 之前的为消费者匹配条件，所有参数和消费者的 URL 进行对比，=> 之后为提供者地址列表的过滤条件，所有参数和提供者的 URL 进行对比；"),e("br"),n._v("\nMockInvokersSelector：是否被配置为使用mock，此路由器保证只有具有协议MOCK的调用者出现在最终的调用者列表中，所有其他调用者将被排除；")]),n._v(" "),e("p",[n._v("下面重点看一下ScriptRouter源码")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public ScriptRouter(URL url) {\n       this.url = url;\n       String type = url.getParameter(Constants.TYPE_KEY);\n       this.priority = url.getParameter(Constants.PRIORITY_KEY, 0);\n       String rule = url.getParameterAndDecoded(Constants.RULE_KEY);\n       if (type == null || type.length() == 0) {\n           type = Constants.DEFAULT_SCRIPT_TYPE_KEY;\n       }\n       if (rule == null || rule.length() == 0) {\n           throw new IllegalStateException(new IllegalStateException("route rule can not be empty. rule:" + rule));\n       }\n       ScriptEngine engine = engines.get(type);\n       if (engine == null) {\n           engine = new ScriptEngineManager().getEngineByName(type);\n           if (engine == null) {\n               throw new IllegalStateException(new IllegalStateException("Unsupported route rule type: " + type + ", rule: " + rule));\n           }\n           engines.put(type, engine);\n       }\n       this.engine = engine;\n       this.rule = rule;\n   }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br")])]),e("p",[n._v("构造器分别初始化脚本引擎(engine)和脚本代码(rule)，默认的脚本引擎是javascript；看一个具体的url：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('"script://0.0.0.0/com.foo.BarService?category=routers&dynamic=false&rule=" + URL.encode("（function route(invokers) { ... } (invokers)）")\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("script协议表示一个脚本协议，rule后面是一段javascript脚本，传入的参数是invokers；")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('（function route(invokers) {\n    var result = new java.util.ArrayList(invokers.size());\n    for (i = 0; i < invokers.size(); i ++) {\n        if ("10.20.153.10".equals(invokers.get(i).getUrl().getHost())) {\n            result.add(invokers.get(i));\n        }\n    }\n    return result;\n} (invokers)）; // 表示立即执行方法\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("如上这段脚本过滤出host为10.20.153.10，具体是如何执行这段脚本的，在route方法中：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n     try {\n         List<Invoker<T>> invokersCopy = new ArrayList<Invoker<T>>(invokers);\n         Compilable compilable = (Compilable) engine;\n         Bindings bindings = engine.createBindings();\n         bindings.put("invokers", invokersCopy);\n         bindings.put("invocation", invocation);\n         bindings.put("context", RpcContext.getContext());\n         CompiledScript function = compilable.compile(rule);\n         Object obj = function.eval(bindings);\n         if (obj instanceof Invoker[]) {\n             invokersCopy = Arrays.asList((Invoker<T>[]) obj);\n         } else if (obj instanceof Object[]) {\n             invokersCopy = new ArrayList<Invoker<T>>();\n             for (Object inv : (Object[]) obj) {\n                 invokersCopy.add((Invoker<T>) inv);\n             }\n         } else {\n             invokersCopy = (List<Invoker<T>>) obj;\n         }\n         return invokersCopy;\n     } catch (ScriptException e) {\n         //fail then ignore rule .invokers.\n         logger.error("route error , rule has been ignored. rule: " + rule + ", method:" + invocation.getMethodName() + ", url: " + RpcContext.getContext().getUrl(), e);\n         return invokers;\n     }\n }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br")])]),e("p",[n._v("首先通过脚本引擎编译脚本，然后执行脚本，同时传入Bindings参数，这样在脚本中就可以获取invokers，然后进行过滤；最后来看一下负载均衡策略")]),n._v(" "),e("h2",{attrs:{id:"loadbalance接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loadbalance接口"}},[n._v("#")]),n._v(" LoadBalance接口")]),n._v(" "),e("p",[n._v("在集群负载均衡时，Dubbo提供了多种均衡策略，缺省为random随机调用，可以自行扩展负载均衡策略；接口类如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@SPI(RandomLoadBalance.NAME)\npublic interface LoadBalance {\n \n    /**\n     * select one invoker in list.\n     *\n     * @param invokers   invokers.\n     * @param url        refer url\n     * @param invocation invocation.\n     * @return selected invoker.\n     */\n    @Adaptive("loadbalance")\n    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n \n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("p",[n._v("SPI定义了默认的策略为RandomLoadBalance，提供了一个select方法，通过策略从服务列表中选择一个invoker；dubbo默认提供了多种策略："),e("br"),n._v("\n**Random LoadBalance：**随机，按权重设置随机概率，在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重；"),e("br"),n._v("\n**RoundRobin LoadBalance：**轮询，按公约后的权重设置轮询比率；存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，"),e("br"),n._v("\n久而久之，所有请求都卡在调到第二台上；"),e("br"),n._v("\n**LeastActive LoadBalance：**最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差；使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大；"),e("br"),n._v(" "),e("strong",[n._v("ConsistentHash LoadBalance")]),n._v("：一致性 Hash，相同参数的请求总是发到同一提供者；当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动；")]),n._v(" "),e("p",[n._v("下面重点看一下默认的RandomLoadBalance源码")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size(); // Number of invokers\n        int totalWeight = 0; // The sum of weights\n        boolean sameWeight = true; // Every invoker has the same weight?\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            totalWeight += weight; // Sum\n            if (sameWeight && i > 0\n                    && weight != getWeight(invokers.get(i - 1), invocation)) {\n                sameWeight = false;\n            }\n        }\n        if (totalWeight > 0 && !sameWeight) {\n            // If (not every invoker has the same weight & at least one invoker's weight>0), select randomly based on totalWeight.\n            int offset = random.nextInt(totalWeight);\n            // Return a invoker based on the random value.\n            for (int i = 0; i < length; i++) {\n                offset -= getWeight(invokers.get(i), invocation);\n                if (offset < 0) {\n                    return invokers.get(i);\n                }\n            }\n        }\n        // If all invokers have the same weight value or totalWeight=0, return evenly.\n        return invokers.get(random.nextInt(length));\n    }\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("p",[n._v("首先计算总权重，同时检查是否每一个服务都有相同的权重；如果总权重大于0并且服务的权重都不相同，则通过权重来随机选择，否则直接通过Random函数来随机；")]),n._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("本文围绕Cluster层中的几个重要的接口从上到下来分别介绍，并重点介绍了其中的某些实现类；结合官方提供的调用图，还是很容易理解此层的。")])])}),[],!1,null,null,null);s.default=a.exports}}]);