(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{468:function(s,n,e){"use strict";e.r(n);var t=e(15),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[e("strong",[s._v("前言")]),e("br"),s._v("\n游戏开发中，经常在玩家进入游戏的时候进行必要的信息初始化，往往这个初始化信息数据包是相对来说还是比较大的，一般在30-40kb左右,还是有必要进行压缩一下再发送消息，刚好前段时间看过，里面列举了一些常用的压缩算法，如下图所示："),e("br"),s._v(" "),e("img",{attrs:{src:"https://static.oschina.net/uploads/space/2016/1213/213005_q8rx_159239.png",alt:""}})]),s._v(" "),e("p",[s._v("是否可切分表示是否可以搜索数据流的任意位置并进一步往下读取数据，这项功能在Hadoop的MapReduce中尤其适合。"),e("br"),s._v("\n下面对这几种压缩格式进行简单的介绍，并进行压力测试，进行性能比较")]),s._v(" "),e("p",[e("strong",[s._v("DEFLATE")]),e("br"),s._v("\nDEFLATE是同时使用了LZ77算法与哈夫曼编码（Huffman Coding）的一个无损数据压缩算法，DEFLATE压缩与解压的源代码可以在自由、通用的压缩库zlib上找到，zlib官网："),e("a",{attrs:{href:"http://www.zlib.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.zlib.net/ "),e("OutboundLink")],1),e("br"),s._v("\njdk中对zlib压缩库提供了支持，压缩类Deflater和解压类Inflater，Deflater和Inflater都提供了native方法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("private native int deflateBytes(long addr, byte[] b, int off, int len,\n                                    int flush);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" private native int inflateBytes(long addr, byte[] b, int off, int len)\n            throws DataFormatException;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("所有可以直接使用jdk提供的压缩类Deflater和解压类Inflater，代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" public static byte[] compress(byte input[]) {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        Deflater compressor = new Deflater(1);\n        try {\n            compressor.setInput(input);\n            compressor.finish();\n            final byte[] buf = new byte[2048];\n            while (!compressor.finished()) {\n                int count = compressor.deflate(buf);\n                bos.write(buf, 0, count);\n            }\n        } finally {\n            compressor.end();\n        }\n        return bos.toByteArray();\n    }\n\n      public static byte[] uncompress(byte[] input) throws DataFormatException {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        Inflater decompressor = new Inflater();\n        try {\n            decompressor.setInput(input);\n            final byte[] buf = new byte[2048];\n            while (!decompressor.finished()) {\n                int count = decompressor.inflate(buf);\n                bos.write(buf, 0, count);\n            }\n        } finally {\n            decompressor.end();\n        }\n        return bos.toByteArray();\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("p",[s._v("可以指定算法的压缩级别，这样你可以在压缩时间和输出文件大小上进行平衡。可选的级别有0（不压缩），以及1(快速压缩)到9（慢速压缩）,这里使用的是以速度为优先。")]),s._v(" "),e("p",[e("strong",[s._v("gzip")]),e("br"),s._v("\ngzip的实现算法还是deflate，只是在deflate格式上增加了文件头和文件尾，同样jdk也对gzip提供了支持，分别是GZIPOutputStream和GZIPInputStream类，同样可以发现GZIPOutputStream是继承于DeflaterOutputStream的，GZIPInputStream继承于InflaterInputStream，并且可以在源码中发现writeHeader和writeTrailer方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("private void writeHeader() throws IOException {\n     ......\n}\nprivate void writeTrailer(byte[] buf, int offset) throws IOException {\n     ......\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("具体的代码实现如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static byte[] compress(byte srcBytes[]) {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        GZIPOutputStream gzip;\n        try {\n            gzip = new GZIPOutputStream(out);\n            gzip.write(srcBytes);\n            gzip.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return out.toByteArray();\n    }\n\n    public static byte[] uncompress(byte[] bytes) {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        ByteArrayInputStream in = new ByteArrayInputStream(bytes);\n        try {\n            GZIPInputStream ungzip = new GZIPInputStream(in);\n            byte[] buffer = new byte[2048];\n            int n;\n            while ((n = ungzip.read(buffer)) >= 0) {\n                out.write(buffer, 0, n);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return out.toByteArray();\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[e("strong",[s._v("bzip2")]),e("br"),s._v("\nbzip2是Julian Seward开发并按照自由软件／开源软件协议发布的数据压缩算法及程序。Seward在1996年7月第一次公开发布了bzip2 0.15版，在随后几年中这个压缩工具稳定性得到改善并且日渐流行，Seward在2000年晚些时候发布了1.0版。更多wiki"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Bzip2",target:"_blank",rel:"noopener noreferrer"}},[s._v("bzip2"),e("OutboundLink")],1),e("br"),s._v("\nbzip2比传统的gzip的压缩效率更高，但是它的压缩速度较慢。"),e("br"),s._v("\njdk中没有对bzip2实现，但是在commons-compress中进行了实现，maven引入：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-compress</artifactId>\n    <version>1.12</version>\n</dependency>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("具体的代码实现如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static byte[] compress(byte srcBytes[]) throws IOException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        BZip2CompressorOutputStream bcos = new BZip2CompressorOutputStream(out);\n        bcos.write(srcBytes);\n        bcos.close();\n        return out.toByteArray();\n    }\n\n    public static byte[] uncompress(byte[] bytes) {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        ByteArrayInputStream in = new ByteArrayInputStream(bytes);\n        try {\n            BZip2CompressorInputStream ungzip = new BZip2CompressorInputStream(\n                    in);\n            byte[] buffer = new byte[2048];\n            int n;\n            while ((n = ungzip.read(buffer)) >= 0) {\n                out.write(buffer, 0, n);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return out.toByteArray();\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])]),e("p",[s._v("下面的介绍的lzo，lz4以及snappy这3中压缩算法，均已压缩速度为优先，但压缩效率稍逊一筹。")]),s._v(" "),e("p",[e("strong",[s._v("lzo")]),e("br"),s._v("\nLZO是致力于解压速度的一种数据压缩算法，LZO是Lempel-Ziv-Oberhumer的缩写。这个算法是无损算法，更多wiki"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/LZO",target:"_blank",rel:"noopener noreferrer"}},[s._v("LZO"),e("OutboundLink")],1),e("br"),s._v("\n需要引入第三方库，maven引入：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<dependency>\n    <groupId>org.anarres.lzo</groupId>\n    <artifactId>lzo-core</artifactId>\n    <version>1.0.5</version>\n</dependency>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("具体实现代码：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static byte[] compress(byte srcBytes[]) throws IOException {\n        LzoCompressor compressor = LzoLibrary.getInstance().newCompressor(\n                LzoAlgorithm.LZO1X, null);\n\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        LzoOutputStream cs = new LzoOutputStream(os, compressor);\n        cs.write(srcBytes);\n        cs.close();\n\n        return os.toByteArray();\n    }\n\n    public static byte[] uncompress(byte[] bytes) throws IOException {\n        LzoDecompressor decompressor = LzoLibrary.getInstance()\n                .newDecompressor(LzoAlgorithm.LZO1X, null);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n        LzoInputStream us = new LzoInputStream(is, decompressor);\n        int count;\n        byte[] buffer = new byte[2048];\n        while ((count = us.read(buffer)) != -1) {\n            baos.write(buffer, 0, count);\n        }\n        return baos.toByteArray();\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])]),e("p",[e("strong",[s._v("lz4")]),e("br"),s._v("\nLZ4是一种无损数据压缩算法，着重于压缩和解压缩速度更多wiki"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/LZ4",target:"_blank",rel:"noopener noreferrer"}},[s._v("lz4"),e("OutboundLink")],1),e("br"),s._v("\nmaven引入第三方库：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<dependency>\n    <groupId>net.jpountz.lz4</groupId>\n    <artifactId>lz4</artifactId>\n    <version>1.2.0</version>\n</dependency>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("具体代码实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static byte[] compress(byte srcBytes[]) throws IOException {\n        LZ4Factory factory = LZ4Factory.fastestInstance();\n        ByteArrayOutputStream byteOutput = new ByteArrayOutputStream();\n        LZ4Compressor compressor = factory.fastCompressor();\n        LZ4BlockOutputStream compressedOutput = new LZ4BlockOutputStream(\n                byteOutput, 2048, compressor);\n        compressedOutput.write(srcBytes);\n        compressedOutput.close();\n        return byteOutput.toByteArray();\n    }\n\n    public static byte[] uncompress(byte[] bytes) throws IOException {\n        LZ4Factory factory = LZ4Factory.fastestInstance();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        LZ4FastDecompressor decompresser = factory.fastDecompressor();\n        LZ4BlockInputStream lzis = new LZ4BlockInputStream(\n                new ByteArrayInputStream(bytes), decompresser);\n        int count;\n        byte[] buffer = new byte[2048];\n        while ((count = lzis.read(buffer)) != -1) {\n            baos.write(buffer, 0, count);\n        }\n        lzis.close();\n        return baos.toByteArray();\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])]),e("p",[e("strong",[s._v("snappy")]),e("br"),s._v("\nSnappy（以前称Zippy）是Google基于LZ77的思路用C++语言编写的快速数据压缩与解压程序库，并在2011年开源。它的目标并非最大压缩率或与其他压缩程序库的兼容性，而是非常高的速度和合理的压缩率。更多wiki"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Snappy",target:"_blank",rel:"noopener noreferrer"}},[s._v("snappy"),e("OutboundLink")],1),e("br"),s._v("\nmaven引入第三方库：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("<dependency>\n    <groupId>org.xerial.snappy</groupId>\n    <artifactId>snappy-java</artifactId>\n    <version>1.1.2.6</version>\n</dependency>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("具体代码实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("    public static byte[] compress(byte srcBytes[]) throws IOException {\n        return  Snappy.compress(srcBytes);\n    }\n\n    public static byte[] uncompress(byte[] bytes) throws IOException {\n        return Snappy.uncompress(bytes);\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("压力测试")]),e("br"),s._v("\n以下对35kb玩家数据进行压缩和解压测试，相对来说35kb数据还是很小量的数据，所有以下测试结果只是针对指定的数据量区间进行测试的结果，并不能说明哪种压缩算法好与不好。"),e("br"),s._v("\n测试环境："),e("br"),s._v("\njdk：1.7.0_79"),e("br"),s._v("\ncpu：i5-4570@3.20GHz 4核"),e("br"),s._v("\nmemory：4G")]),s._v(" "),e("p",[s._v("对35kb数据进行2000次压缩和解压缩测试，测试代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public static void main(String[] args) throws Exception {\n        FileInputStream fis = new FileInputStream(new File("player.dat"));\n        FileChannel channel = fis.getChannel();\n        ByteBuffer bb = ByteBuffer.allocate((int) channel.size());\n        channel.read(bb);\n        byte[] beforeBytes = bb.array();\n\n        int times = 2000;\n        System.out.println("压缩前大小：" + beforeBytes.length + " bytes");\n        long startTime1 = System.currentTimeMillis();\n        byte[] afterBytes = null;\n        for (int i = 0; i < times; i++) {\n            afterBytes = GZIPUtil.compress(beforeBytes);\n        }\n        long endTime1 = System.currentTimeMillis();\n        System.out.println("压缩后大小：" + afterBytes.length + " bytes");\n        System.out.println("压缩次数：" + times + "，时间：" + (endTime1 - startTime1)\n                + "ms");\n\n        byte[] resultBytes = null;\n        long startTime2 = System.currentTimeMillis();\n        for (int i = 0; i < times; i++) {\n            resultBytes = GZIPUtil.uncompress(afterBytes);\n        }\n        System.out.println("解压缩后大小：" + resultBytes.length + " bytes");\n        long endTime2 = System.currentTimeMillis();\n        System.out.println("解压缩次数：" + times + "，时间：" + (endTime2 - startTime2)\n                + "ms");\n    }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[s._v("代码中的GZIPUtil根据不同的算法进行替换，测试结果如下图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://static.oschina.net/uploads/space/2016/1213/213502_Lzwu_159239.png",alt:""}})]),s._v(" "),e("p",[s._v("分别对压缩前大小、压缩后大小、压缩时间、解压缩时间、cpu高峰进行了统计")]),s._v(" "),e("p",[e("strong",[s._v("总结")]),e("br"),s._v("\n从结果来看，deflate、gzip和bzip2更关注压缩率，压缩和解压缩时间会更长；lzo，lz4以及snappy这3中压缩算法，均已压缩速度为优先，压缩率会稍逊一筹；lzo，lz4以及snappy在cpu高峰更低一点。因为在容忍的压缩率之内，我们更加关注压缩和解压缩时间，以及cpu使用，所有最终使用了snappy，不难发现snappy在压缩和解压缩时间以及cpu高峰都是最低的，并且在压力率上也没有太多的劣势。")])])}),[],!1,null,null,null);n.default=a.exports}}]);